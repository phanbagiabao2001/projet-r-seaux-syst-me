
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b50  08002b50  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002b50  08002b50  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b50  08002b50  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000094  08002bec  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08002bec  00020598  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a36  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000654  00000000  00000000  00021af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00022148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000222e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ebf  00000000  00000000  00022430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002287  00000000  00000000  000252ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b01f  00000000  00000000  00027576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00032595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001158  00000000  00000000  000325e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002a14 	.word	0x08002a14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08002a14 	.word	0x08002a14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <delay>:

uint8_t g_data=0;

extern void initialise_monitor_handles();

void delay(void){
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	0003d08f 	.word	0x0003d08f

080002ec <USART2_Init>:

void USART2_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART1;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <USART2_Init+0x3c>)
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <USART2_Init+0x40>)
 80002f4:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <USART2_Init+0x3c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <USART2_Init+0x3c>)
 8000300:	2200      	movs	r2, #0
 8000302:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <USART2_Init+0x3c>)
 8000306:	2202      	movs	r2, #2
 8000308:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <USART2_Init+0x3c>)
 800030c:	2200      	movs	r2, #0
 800030e:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <USART2_Init+0x3c>)
 8000312:	2200      	movs	r2, #0
 8000314:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000316:	4b04      	ldr	r3, [pc, #16]	; (8000328 <USART2_Init+0x3c>)
 8000318:	2200      	movs	r2, #0
 800031a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <USART2_Init+0x3c>)
 800031e:	f000 fc9b 	bl	8000c58 <USART_Init>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200004b0 	.word	0x200004b0
 800032c:	40011000 	.word	0x40011000

08000330 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOBaseAddr = GPIOA;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <USART2_GPIOInit+0x40>)
 8000338:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800033a:	2302      	movs	r3, #2
 800033c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800033e:	2300      	movs	r3, #0
 8000340:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000342:	2301      	movs	r3, #1
 8000344:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000346:	2302      	movs	r3, #2
 8000348:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800034a:	2307      	movs	r3, #7
 800034c:	737b      	strb	r3, [r7, #13]

	//USART6 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800034e:	2302      	movs	r3, #2
 8000350:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f9ad 	bl	80006b4 <GPIO_Init>

	//USART6 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800035a:	2303      	movs	r3, #3
 800035c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9a7 	bl	80006b4 <GPIO_Init>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40020000 	.word	0x40020000

08000374 <main>:
	GPIO_PeriClockControl(GPIOC,ENABLE);
	GPIO_Init(&GpioBtn);
}

int main(void)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 800037e:	f001 fa9d 	bl	80018bc <initialise_monitor_handles>

	USART2_GPIOInit();
 8000382:	f7ff ffd5 	bl	8000330 <USART2_GPIOInit>
    USART2_Init();
 8000386:	f7ff ffb1 	bl	80002ec <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 800038a:	2101      	movs	r1, #1
 800038c:	2026      	movs	r0, #38	; 0x26
 800038e:	f000 fe2b 	bl	8000fe8 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 8000392:	2101      	movs	r1, #1
 8000394:	4831      	ldr	r0, [pc, #196]	; (800045c <main+0xe8>)
 8000396:	f000 fce2 	bl	8000d5e <USART_PeripheralControl>

    printf("Application is running\n");
 800039a:	4831      	ldr	r0, [pc, #196]	; (8000460 <main+0xec>)
 800039c:	f001 fd50 	bl	8001e40 <puts>


	while(1)
	{
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == 0);
 80003a0:	bf00      	nop
 80003a2:	210d      	movs	r1, #13
 80003a4:	482f      	ldr	r0, [pc, #188]	; (8000464 <main+0xf0>)
 80003a6:	f000 fb1f 	bl	80009e8 <GPIO_ReadFromInputPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f8      	beq.n	80003a2 <main+0x2e>

			delay();
 80003b0:	f7ff ff86 	bl	80002c0 <delay>

			// Next message index ; make sure that cnt value doesn't cross 2
			cnt = cnt % 3;
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <main+0xf4>)
 80003b8:	fba3 1302 	umull	r1, r3, r3, r2
 80003bc:	0859      	lsrs	r1, r3, #1
 80003be:	460b      	mov	r3, r1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	440b      	add	r3, r1
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	607b      	str	r3, [r7, #4]

			//First lets enable the reception in interrupt mode
			//this code enables the receive interrupt
			while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 80003c8:	bf00      	nop
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <main+0xf8>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff1c 	bl	8000210 <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	4924      	ldr	r1, [pc, #144]	; (8000470 <main+0xfc>)
 80003de:	4825      	ldr	r0, [pc, #148]	; (8000474 <main+0x100>)
 80003e0:	f000 fdda 	bl	8000f98 <USART_ReceiveDataIT>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1ef      	bne.n	80003ca <main+0x56>

			//Send the msg indexed by cnt in blocking mode
	    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80003ea:	4a20      	ldr	r2, [pc, #128]	; (800046c <main+0xf8>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <main+0xf8>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff08 	bl	8000210 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	4621      	mov	r1, r4
 8000406:	481b      	ldr	r0, [pc, #108]	; (8000474 <main+0x100>)
 8000408:	f000 fd78 	bl	8000efc <USART_SendData>

	    	printf("Transmitted : %s\n",msg[cnt]);
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <main+0xf8>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	4619      	mov	r1, r3
 8000416:	4818      	ldr	r0, [pc, #96]	; (8000478 <main+0x104>)
 8000418:	f001 fc8c 	bl	8001d34 <iprintf>


	    	//Now lets wait until all the bytes are received from the arduino .
	    	//When all the bytes are received rxCmplt will be SET in application callback
	    	while(rxCmplt != SET);
 800041c:	bf00      	nop
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <main+0x108>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d1fb      	bne.n	800041e <main+0xaa>

	    	//just make sure that last byte should be null otherwise %s fails while printing
	    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <main+0xf8>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff feee 	bl	8000210 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	3301      	adds	r3, #1
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <main+0xfc>)
 800043a:	2100      	movs	r1, #0
 800043c:	54d1      	strb	r1, [r2, r3]

	    	//Print what we received from the arduino
	    	printf("Received    : %s\n",rx_buf);
 800043e:	490c      	ldr	r1, [pc, #48]	; (8000470 <main+0xfc>)
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <main+0x10c>)
 8000442:	f001 fc77 	bl	8001d34 <iprintf>

	    	//invalidate the flag
	    	rxCmplt = RESET;
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <main+0x108>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]

	    	//move on to next message indexed in msg[]
	    	cnt ++;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]

		return 0;
 8000452:	2300      	movs	r3, #0
	}
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bd90      	pop	{r4, r7, pc}
 800045c:	40004400 	.word	0x40004400
 8000460:	08002a60 	.word	0x08002a60
 8000464:	40020800 	.word	0x40020800
 8000468:	aaaaaaab 	.word	0xaaaaaaab
 800046c:	20000000 	.word	0x20000000
 8000470:	200000b0 	.word	0x200000b0
 8000474:	200004b0 	.word	0x200004b0
 8000478:	08002a78 	.word	0x08002a78
 800047c:	200004d4 	.word	0x200004d4
 8000480:	08002a8c 	.word	0x08002a8c

08000484 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <USART2_IRQHandler+0x10>)
 800048a:	f000 fe31 	bl	80010f0 <USART_IRQHandling>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200004b0 	.word	0x200004b0

08000498 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d102      	bne.n	80004b0 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <USART_ApplicationEventCallback+0x24>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	200004d4 	.word	0x200004d4

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ee:	f001 fb5d 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff ff3f 	bl	8000374 <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   r0, =_estack
 80004f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000504:	08002b58 	.word	0x08002b58
  ldr r2, =_sbss
 8000508:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800050c:	20000598 	.word	0x20000598

08000510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC_IRQHandler>
	...

08000514 <GPIO_PeriClockControl>:
 *
 * @note			- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d157      	bne.n	80005d6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a59      	ldr	r2, [pc, #356]	; (8000690 <GPIO_PeriClockControl+0x17c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x28>
			GPIOA_PLCK_EN();
 800052e:	4b59      	ldr	r3, [pc, #356]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a58      	ldr	r2, [pc, #352]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PLCK_DI();
		}else if (pGPIOx == GPIOH){
			GPIOH_PLCK_DI();
		}
	}
}
 800053a:	e0a3      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a56      	ldr	r2, [pc, #344]	; (8000698 <GPIO_PeriClockControl+0x184>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClockControl+0x3e>
			GPIOB_PLCK_EN();
 8000544:	4b53      	ldr	r3, [pc, #332]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a52      	ldr	r2, [pc, #328]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000550:	e098      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a51      	ldr	r2, [pc, #324]	; (800069c <GPIO_PeriClockControl+0x188>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClockControl+0x54>
			GPIOC_PLCK_EN();
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a4d      	ldr	r2, [pc, #308]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000566:	e08d      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a4d      	ldr	r2, [pc, #308]	; (80006a0 <GPIO_PeriClockControl+0x18c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0x6a>
			GPIOD_PLCK_EN();
 8000570:	4b48      	ldr	r3, [pc, #288]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a47      	ldr	r2, [pc, #284]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057c:	e082      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <GPIO_PeriClockControl+0x190>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PeriClockControl+0x80>
			GPIOE_PLCK_EN();
 8000586:	4b43      	ldr	r3, [pc, #268]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a42      	ldr	r2, [pc, #264]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000592:	e077      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a44      	ldr	r2, [pc, #272]	; (80006a8 <GPIO_PeriClockControl+0x194>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClockControl+0x96>
			GPIOF_PLCK_EN();
 800059c:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a3c      	ldr	r2, [pc, #240]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a8:	e06c      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a3f      	ldr	r2, [pc, #252]	; (80006ac <GPIO_PeriClockControl+0x198>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PLCK_EN();
 80005b2:	4b38      	ldr	r3, [pc, #224]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a37      	ldr	r2, [pc, #220]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005be:	e061      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a3b      	ldr	r2, [pc, #236]	; (80006b0 <GPIO_PeriClockControl+0x19c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d15d      	bne.n	8000684 <GPIO_PeriClockControl+0x170>
			GPIOH_PLCK_EN();
 80005c8:	4b32      	ldr	r3, [pc, #200]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d4:	e056      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a2d      	ldr	r2, [pc, #180]	; (8000690 <GPIO_PeriClockControl+0x17c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PLCK_DI();
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005e4:	f023 0301 	bic.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ea:	e04b      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <GPIO_PeriClockControl+0x184>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClockControl+0xee>
			GPIOB_PLCK_DI();
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <GPIO_PeriClockControl+0x180>)
 80005fa:	f023 0302 	bic.w	r3, r3, #2
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000600:	e040      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <GPIO_PeriClockControl+0x188>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x104>
			GPIOC_PLCK_DI();
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a21      	ldr	r2, [pc, #132]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000610:	f023 0304 	bic.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000616:	e035      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <GPIO_PeriClockControl+0x18c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x11a>
			GPIOD_PLCK_DI();
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000626:	f023 0308 	bic.w	r3, r3, #8
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062c:	e02a      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <GPIO_PeriClockControl+0x190>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x130>
			GPIOE_PLCK_DI();
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800063c:	f023 0310 	bic.w	r3, r3, #16
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000642:	e01f      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <GPIO_PeriClockControl+0x194>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x146>
			GPIOF_PLCK_DI();
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000652:	f023 0320 	bic.w	r3, r3, #32
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000658:	e014      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG){
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <GPIO_PeriClockControl+0x198>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0x15c>
			GPIOG_PLCK_DI();
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <GPIO_PeriClockControl+0x180>)
 8000668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066e:	e009      	b.n	8000684 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <GPIO_PeriClockControl+0x19c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d105      	bne.n	8000684 <GPIO_PeriClockControl+0x170>
			GPIOH_PLCK_DI();
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <GPIO_PeriClockControl+0x180>)
 800067e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40020000 	.word	0x40020000
 8000694:	40023800 	.word	0x40023800
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40021400 	.word	0x40021400
 80006ac:	40021800 	.word	0x40021800
 80006b0:	40021c00 	.word	0x40021c00

080006b4 <GPIO_Init>:
 *
 * @note			- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOBaseAddr, ENABLE);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff24 	bl	8000514 <GPIO_PeriClockControl>

	//1. configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	795b      	ldrb	r3, [r3, #5]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d820      	bhi.n	8000716 <GPIO_Init+0x62>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOBaseAddr->MODER &= ~(0x3 << 2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	2103      	movs	r1, #3
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	400a      	ands	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
																	//clear. we put 00 so it is ~11 meaning that ~0x3
		pGPIOHandle->pGPIOBaseAddr->MODER |= temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	430a      	orrs	r2, r1
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e0c1      	b.n	800089a <GPIO_Init+0x1e6>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	2b04      	cmp	r3, #4
 800071c:	d117      	bne.n	800074e <GPIO_Init+0x9a>
		{
			//1. Configure the Falling trigger selection register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071e:	4b47      	ldr	r3, [pc, #284]	; (800083c <GPIO_Init+0x188>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7912      	ldrb	r2, [r2, #4]
 8000726:	4611      	mov	r1, r2
 8000728:	2201      	movs	r2, #1
 800072a:	408a      	lsls	r2, r1
 800072c:	4611      	mov	r1, r2
 800072e:	4a43      	ldr	r2, [pc, #268]	; (800083c <GPIO_Init+0x188>)
 8000730:	430b      	orrs	r3, r1
 8000732:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <GPIO_Init+0x188>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7912      	ldrb	r2, [r2, #4]
 800073c:	4611      	mov	r1, r2
 800073e:	2201      	movs	r2, #1
 8000740:	408a      	lsls	r2, r1
 8000742:	43d2      	mvns	r2, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a3d      	ldr	r2, [pc, #244]	; (800083c <GPIO_Init+0x188>)
 8000748:	400b      	ands	r3, r1
 800074a:	6093      	str	r3, [r2, #8]
 800074c:	e035      	b.n	80007ba <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	2b05      	cmp	r3, #5
 8000754:	d117      	bne.n	8000786 <GPIO_Init+0xd2>
		{
			// 1. Configure the Rising trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <GPIO_Init+0x188>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	7912      	ldrb	r2, [r2, #4]
 800075e:	4611      	mov	r1, r2
 8000760:	2201      	movs	r2, #1
 8000762:	408a      	lsls	r2, r1
 8000764:	4611      	mov	r1, r2
 8000766:	4a35      	ldr	r2, [pc, #212]	; (800083c <GPIO_Init+0x188>)
 8000768:	430b      	orrs	r3, r1
 800076a:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <GPIO_Init+0x188>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	43d2      	mvns	r2, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <GPIO_Init+0x188>)
 8000780:	400b      	ands	r3, r1
 8000782:	60d3      	str	r3, [r2, #12]
 8000784:	e019      	b.n	80007ba <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	2b06      	cmp	r3, #6
 800078c:	d115      	bne.n	80007ba <GPIO_Init+0x106>
		{
			// 1. Configure both
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <GPIO_Init+0x188>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	2201      	movs	r2, #1
 800079a:	408a      	lsls	r2, r1
 800079c:	4611      	mov	r1, r2
 800079e:	4a27      	ldr	r2, [pc, #156]	; (800083c <GPIO_Init+0x188>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <GPIO_Init+0x188>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	7912      	ldrb	r2, [r2, #4]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <GPIO_Init+0x188>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIOA_BASEADDR_TO_CODE(pGPIOHandle->pGPIOBaseAddr);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <GPIO_Init+0x18c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d044      	beq.n	8000860 <GPIO_Init+0x1ac>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <GPIO_Init+0x190>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d02b      	beq.n	8000838 <GPIO_Init+0x184>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <GPIO_Init+0x194>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d024      	beq.n	8000834 <GPIO_Init+0x180>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <GPIO_Init+0x198>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d01d      	beq.n	8000830 <GPIO_Init+0x17c>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <GPIO_Init+0x19c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d016      	beq.n	800082c <GPIO_Init+0x178>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <GPIO_Init+0x1a0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d00f      	beq.n	8000828 <GPIO_Init+0x174>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <GPIO_Init+0x1a4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d008      	beq.n	8000824 <GPIO_Init+0x170>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <GPIO_Init+0x1a8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d101      	bne.n	8000820 <GPIO_Init+0x16c>
 800081c:	2307      	movs	r3, #7
 800081e:	e020      	b.n	8000862 <GPIO_Init+0x1ae>
 8000820:	2300      	movs	r3, #0
 8000822:	e01e      	b.n	8000862 <GPIO_Init+0x1ae>
 8000824:	2306      	movs	r3, #6
 8000826:	e01c      	b.n	8000862 <GPIO_Init+0x1ae>
 8000828:	2305      	movs	r3, #5
 800082a:	e01a      	b.n	8000862 <GPIO_Init+0x1ae>
 800082c:	2304      	movs	r3, #4
 800082e:	e018      	b.n	8000862 <GPIO_Init+0x1ae>
 8000830:	2303      	movs	r3, #3
 8000832:	e016      	b.n	8000862 <GPIO_Init+0x1ae>
 8000834:	2302      	movs	r3, #2
 8000836:	e014      	b.n	8000862 <GPIO_Init+0x1ae>
 8000838:	2301      	movs	r3, #1
 800083a:	e012      	b.n	8000862 <GPIO_Init+0x1ae>
 800083c:	40013c00 	.word	0x40013c00
 8000840:	40020000 	.word	0x40020000
 8000844:	40020400 	.word	0x40020400
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40021000 	.word	0x40021000
 8000854:	40021400 	.word	0x40021400
 8000858:	40021800 	.word	0x40021800
 800085c:	40021c00 	.word	0x40021c00
 8000860:	2300      	movs	r3, #0
 8000862:	747b      	strb	r3, [r7, #17]
		SYSCFG_PLCK_EN();
 8000864:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <GPIO_Init+0x328>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a5c      	ldr	r2, [pc, #368]	; (80009dc <GPIO_Init+0x328>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000870:	7c7a      	ldrb	r2, [r7, #17]
 8000872:	7cbb      	ldrb	r3, [r7, #18]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	fa02 f103 	lsl.w	r1, r2, r3
 800087a:	4a59      	ldr	r2, [pc, #356]	; (80009e0 <GPIO_Init+0x32c>)
 800087c:	7cfb      	ldrb	r3, [r7, #19]
 800087e:	3302      	adds	r3, #2
 8000880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable the exit interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000884:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <GPIO_Init+0x330>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7912      	ldrb	r2, [r2, #4]
 800088c:	4611      	mov	r1, r2
 800088e:	2201      	movs	r2, #1
 8000890:	408a      	lsls	r2, r1
 8000892:	4611      	mov	r1, r2
 8000894:	4a53      	ldr	r2, [pc, #332]	; (80009e4 <GPIO_Init+0x330>)
 8000896:	430b      	orrs	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	799b      	ldrb	r3, [r3, #6]
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	791b      	ldrb	r3, [r3, #4]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOBaseAddr->OSPEEDR &= ~(0x3 << 2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	2103      	movs	r1, #3
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	400a      	ands	r2, r1
 80008cc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOBaseAddr->OSPEEDR |= temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6899      	ldr	r1, [r3, #8]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	430a      	orrs	r2, r1
 80008dc:	609a      	str	r2, [r3, #8]

	temp = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	79db      	ldrb	r3, [r3, #7]
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOBaseAddr->PUPDR &= ~(0x3 << 2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2103      	movs	r1, #3
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	400a      	ands	r2, r1
 8000910:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOBaseAddr->PUPDR |= temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68d9      	ldr	r1, [r3, #12]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	430a      	orrs	r2, r1
 8000920:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7a1b      	ldrb	r3, [r3, #8]
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOBaseAddr->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	4619      	mov	r1, r3
 8000942:	2301      	movs	r3, #1
 8000944:	408b      	lsls	r3, r1
 8000946:	43db      	mvns	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	400a      	ands	r2, r1
 8000950:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOBaseAddr->OTYPER |= temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6859      	ldr	r1, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	430a      	orrs	r2, r1
 8000960:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d131      	bne.n	80009d2 <GPIO_Init+0x31e>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOBaseAddr->AFR[temp1]  &= ~(0xF << (4 * temp2));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7c3a      	ldrb	r2, [r7, #16]
 8000986:	3208      	adds	r2, #8
 8000988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	7c3a      	ldrb	r2, [r7, #16]
 80009a0:	4001      	ands	r1, r0
 80009a2:	3208      	adds	r2, #8
 80009a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOBaseAddr->AFR[temp1]  |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	7c3a      	ldrb	r2, [r7, #16]
 80009ae:	3208      	adds	r2, #8
 80009b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7a5b      	ldrb	r3, [r3, #9]
 80009b8:	461a      	mov	r2, r3
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	7c3a      	ldrb	r2, [r7, #16]
 80009ca:	4301      	orrs	r1, r0
 80009cc:	3208      	adds	r2, #8
 80009ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40013800 	.word	0x40013800
 80009e4:	40013c00 	.word	0x40013c00

080009e8 <GPIO_ReadFromInputPin>:
	 * @return			- 0 or 1
	 *
	 * @note			- none
	 *
	 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){ //type uint8 or boolean because the base addr of the GPIO
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
																	// peripheral and the return value must be either 0 or 1

	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691a      	ldr	r2, [r3, #16]
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	fa22 f303 	lsr.w	r3, r2, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <RCC_GetPLLOutputClock>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};


uint32_t  RCC_GetPLLOutputClock()
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
	return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemClk;
	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3); //RCC->CFGR >> 2: bring the bit number second and third to the bit position zero and one.
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <RCC_GetPCLK1Value+0xa0>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	727b      	strb	r3, [r7, #9]
						//this will mark out all other bits except the bit number zero and bit number one where out value is stored

	if(clksrc == 0)
 8000a34:	7a7b      	ldrb	r3, [r7, #9]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <RCC_GetPCLK1Value+0x20>
	{
		systemClk = 16000000;
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <RCC_GetPCLK1Value+0xa4>)
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00b      	b.n	8000a58 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000a40:	7a7b      	ldrb	r3, [r7, #9]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d102      	bne.n	8000a4c <RCC_GetPCLK1Value+0x2c>
	{
		systemClk = 8000000;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <RCC_GetPCLK1Value+0xa8>)
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e005      	b.n	8000a58 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8000a4c:	7a7b      	ldrb	r3, [r7, #9]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d102      	bne.n	8000a58 <RCC_GetPCLK1Value+0x38>
	{
		systemClk = RCC_GetPLLOutputClock();
 8000a52:	f7ff ffde 	bl	8000a12 <RCC_GetPLLOutputClock>
 8000a56:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <RCC_GetPCLK1Value+0xa0>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	091b      	lsrs	r3, r3, #4
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a66:	7a3b      	ldrb	r3, [r7, #8]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d802      	bhi.n	8000a72 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	72fb      	strb	r3, [r7, #11]
 8000a70:	e005      	b.n	8000a7e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000a72:	7a3b      	ldrb	r3, [r7, #8]
 8000a74:	3b08      	subs	r3, #8
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <RCC_GetPCLK1Value+0xac>)
 8000a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7c:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <RCC_GetPCLK1Value+0xa0>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	0a9b      	lsrs	r3, r3, #10
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000a8c:	7a3b      	ldrb	r3, [r7, #8]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d802      	bhi.n	8000a98 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	72bb      	strb	r3, [r7, #10]
 8000a96:	e005      	b.n	8000aa4 <RCC_GetPCLK1Value+0x84>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000a98:	7a3b      	ldrb	r3, [r7, #8]
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <RCC_GetPCLK1Value+0xb0>)
 8000a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa2:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (systemClk / ahbp) / apb1p;
 8000aa4:	7afb      	ldrb	r3, [r7, #11]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aac:	7abb      	ldrb	r3, [r7, #10]
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	00f42400 	.word	0x00f42400
 8000ac8:	007a1200 	.word	0x007a1200
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	2000001c 	.word	0x2000001c

08000ad4 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <RCC_GetPCLK2Value+0x8c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000aec:	7a7b      	ldrb	r3, [r7, #9]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <RCC_GetPCLK2Value+0x90>)
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e001      	b.n	8000afc <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <RCC_GetPCLK2Value+0x94>)
 8000afa:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <RCC_GetPCLK2Value+0x8c>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d802      	bhi.n	8000b14 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	72fb      	strb	r3, [r7, #11]
 8000b12:	e005      	b.n	8000b20 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b08      	subs	r3, #8
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <RCC_GetPCLK2Value+0x98>)
 8000b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <RCC_GetPCLK2Value+0x8c>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	0b5b      	lsrs	r3, r3, #13
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d802      	bhi.n	8000b38 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	72bb      	strb	r3, [r7, #10]
 8000b36:	e005      	b.n	8000b44 <RCC_GetPCLK2Value+0x70>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <RCC_GetPCLK2Value+0x9c>)
 8000b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b42:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b4c:	7abb      	ldrb	r3, [r7, #10]
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000b54:	683b      	ldr	r3, [r7, #0]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800
 8000b64:	00f42400 	.word	0x00f42400
 8000b68:	007a1200 	.word	0x007a1200
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	2000001c 	.word	0x2000001c

08000b74 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <USART_SetBaudRate+0xd8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d003      	beq.n	8000b92 <USART_SetBaudRate+0x1e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a30      	ldr	r2, [pc, #192]	; (8000c50 <USART_SetBaudRate+0xdc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d103      	bne.n	8000b9a <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b92:	f7ff ff9f 	bl	8000ad4 <RCC_GetPCLK2Value>
 8000b96:	61f8      	str	r0, [r7, #28]
 8000b98:	e002      	b.n	8000ba0 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000b9a:	f7ff ff41 	bl	8000a20 <RCC_GetPCLK1Value>
 8000b9e:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009a      	lsls	r2, r3, #2
 8000bb6:	441a      	add	r2, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	e00a      	b.n	8000bda <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	009a      	lsls	r2, r3, #2
 8000bce:	441a      	add	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd8:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <USART_SetBaudRate+0xe0>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2264      	movs	r2, #100	; 0x64
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00a      	beq.n	8000c20 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	3332      	adds	r3, #50	; 0x32
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <USART_SetBaudRate+0xe0>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e009      	b.n	8000c34 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	3332      	adds	r3, #50	; 0x32
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <USART_SetBaudRate+0xe0>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	095b      	lsrs	r3, r3, #5
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	609a      	str	r2, [r3, #8]
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40011400 	.word	0x40011400
 8000c54:	51eb851f 	.word	0x51eb851f

08000c58 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f892 	bl	8000d94 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d104      	bne.n	8000c82 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e010      	b.n	8000ca4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d104      	bne.n	8000c94 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e007      	b.n	8000ca4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d103      	bne.n	8000ca4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f043 030c 	orr.w	r3, r3, #12
 8000ca2:	60fb      	str	r3, [r7, #12]
	}


    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7b5b      	ldrb	r3, [r3, #13]
 8000ca8:	031b      	lsls	r3, r3, #12
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b9b      	ldrb	r3, [r3, #14]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d104      	bne.n	8000cc4 <USART_Init+0x6c>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	e00b      	b.n	8000cdc <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7b9b      	ldrb	r3, [r3, #14]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d107      	bne.n	8000cdc <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b1b      	ldrb	r3, [r3, #12]
 8000cec:	031b      	lsls	r3, r3, #12
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7bdb      	ldrb	r3, [r3, #15]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d104      	bne.n	8000d14 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e014      	b.n	8000d3e <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7bdb      	ldrb	r3, [r3, #15]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d104      	bne.n	8000d26 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e00b      	b.n	8000d3e <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7bdb      	ldrb	r3, [r3, #15]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d107      	bne.n	8000d3e <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR3 register
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4610      	mov	r0, r2
 8000d52:	f7ff ff0f 	bl	8000b74 <USART_SetBaudRate>

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <USART_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d106      	bne.n	8000d7e <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 8000d7c:	e005      	b.n	8000d8a <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60da      	str	r2, [r3, #12]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <USART_PeriClockControl>:
 *
 * @note			- none
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d141      	bne.n	8000e2a <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a43      	ldr	r2, [pc, #268]	; (8000eb8 <USART_PeriClockControl+0x124>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d106      	bne.n	8000dbc <USART_PeriClockControl+0x28>
			USART1_PLCK_EN();
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
			UART5_PLCK_DI();
		}else if (pUSARTx == USART6){
			USART6_PLCK_DI();
		}
	}
}
 8000dba:	e077      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2){
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a40      	ldr	r2, [pc, #256]	; (8000ec0 <USART_PeriClockControl+0x12c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d106      	bne.n	8000dd2 <USART_PeriClockControl+0x3e>
			USART2_PLCK_EN();
 8000dc4:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a3c      	ldr	r2, [pc, #240]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dd0:	e06c      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3){
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a3b      	ldr	r2, [pc, #236]	; (8000ec4 <USART_PeriClockControl+0x130>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d106      	bne.n	8000de8 <USART_PeriClockControl+0x54>
			USART3_PLCK_EN();
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000de6:	e061      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART4){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <USART_PeriClockControl+0x134>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d106      	bne.n	8000dfe <USART_PeriClockControl+0x6a>
			UART4_PLCK_EN();
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000df6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dfc:	e056      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART5){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a32      	ldr	r2, [pc, #200]	; (8000ecc <USART_PeriClockControl+0x138>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d106      	bne.n	8000e14 <USART_PeriClockControl+0x80>
			UART5_PLCK_EN();
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a2c      	ldr	r2, [pc, #176]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e12:	e04b      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART6){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <USART_PeriClockControl+0x13c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d147      	bne.n	8000eac <USART_PeriClockControl+0x118>
			USART6_PLCK_EN();
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e28:	e040      	b.n	8000eac <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <USART_PeriClockControl+0x124>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d106      	bne.n	8000e40 <USART_PeriClockControl+0xac>
			USART1_PLCK_DI();
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e38:	f023 0310 	bic.w	r3, r3, #16
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e3e:	e035      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <USART_PeriClockControl+0x12c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d106      	bne.n	8000e56 <USART_PeriClockControl+0xc2>
			USART2_PLCK_DI();
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e54:	e02a      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3){
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <USART_PeriClockControl+0x130>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <USART_PeriClockControl+0xd8>
			USART3_PLCK_DI();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e6a:	e01f      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART4){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <USART_PeriClockControl+0x134>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <USART_PeriClockControl+0xee>
			UART4_PLCK_DI();
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e7a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e80:	e014      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART5){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <USART_PeriClockControl+0x138>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <USART_PeriClockControl+0x104>
			UART5_PLCK_DI();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000e90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e96:	e009      	b.n	8000eac <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART6){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <USART_PeriClockControl+0x13c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d105      	bne.n	8000eac <USART_PeriClockControl+0x118>
			USART6_PLCK_DI();
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <USART_PeriClockControl+0x128>)
 8000ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eaa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	40004c00 	.word	0x40004c00
 8000ecc:	40005000 	.word	0x40005000
 8000ed0:	40011400 	.word	0x40011400

08000ed4 <USART_GetFlagStatus>:
 * @return            -
 *
 * @Note              -
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e031      	b.n	8000f72 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000f0e:	bf00      	nop
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffdc 	bl	8000ed4 <USART_GetFlagStatus>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f6      	beq.n	8000f10 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	7b5b      	ldrb	r3, [r3, #13]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d118      	bne.n	8000f5c <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f3c:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	7b9b      	ldrb	r3, [r3, #14]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	e00b      	b.n	8000f6c <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e007      	b.n	8000f6c <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3c9      	bcc.n	8000f0e <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000f7a:	bf00      	nop
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffa6 	bl	8000ed4 <USART_GetFlagStatus>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f6      	beq.n	8000f7c <USART_SendData+0x80>
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <USART_ReceiveDataIT>:
 *
 * @Note              - Resolve all the TODOs

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000faa:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d014      	beq.n	8000fdc <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(void)pUSARTHandle->pUSARTx->DR;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	60da      	str	r2, [r3, #12]
	}

	return rxstate;
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <USART_IRQInterruptConfig>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d133      	bne.n	8001066 <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b1f      	cmp	r3, #31
 8001002:	d80a      	bhi.n	800101a <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <USART_IRQInterruptConfig+0xf0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	2101      	movs	r1, #1
 800100c:	fa01 f202 	lsl.w	r2, r1, r2
 8001010:	4611      	mov	r1, r2
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <USART_IRQInterruptConfig+0xf0>)
 8001014:	430b      	orrs	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8001018:	e059      	b.n	80010ce <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b1f      	cmp	r3, #31
 800101e:	d90f      	bls.n	8001040 <USART_IRQInterruptConfig+0x58>
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b3f      	cmp	r3, #63	; 0x3f
 8001024:	d80c      	bhi.n	8001040 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <USART_IRQInterruptConfig+0xf4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4611      	mov	r1, r2
 8001038:	4a28      	ldr	r2, [pc, #160]	; (80010dc <USART_IRQInterruptConfig+0xf4>)
 800103a:	430b      	orrs	r3, r1
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e046      	b.n	80010ce <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b3f      	cmp	r3, #63	; 0x3f
 8001044:	d943      	bls.n	80010ce <USART_IRQInterruptConfig+0xe6>
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b5f      	cmp	r3, #95	; 0x5f
 800104a:	d840      	bhi.n	80010ce <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <USART_IRQInterruptConfig+0xf8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4611      	mov	r1, r2
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <USART_IRQInterruptConfig+0xf8>)
 8001060:	430b      	orrs	r3, r1
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	e033      	b.n	80010ce <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b1f      	cmp	r3, #31
 800106a:	d80a      	bhi.n	8001082 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <USART_IRQInterruptConfig+0xfc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	4611      	mov	r1, r2
 800107a:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <USART_IRQInterruptConfig+0xfc>)
 800107c:	430b      	orrs	r3, r1
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	e025      	b.n	80010ce <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b1f      	cmp	r3, #31
 8001086:	d90f      	bls.n	80010a8 <USART_IRQInterruptConfig+0xc0>
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b3f      	cmp	r3, #63	; 0x3f
 800108c:	d80c      	bhi.n	80010a8 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <USART_IRQInterruptConfig+0x100>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	f002 021f 	and.w	r2, r2, #31
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f202 	lsl.w	r2, r1, r2
 800109e:	4611      	mov	r1, r2
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <USART_IRQInterruptConfig+0x100>)
 80010a2:	430b      	orrs	r3, r1
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e012      	b.n	80010ce <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d90f      	bls.n	80010ce <USART_IRQInterruptConfig+0xe6>
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b5f      	cmp	r3, #95	; 0x5f
 80010b2:	d80c      	bhi.n	80010ce <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <USART_IRQInterruptConfig+0x104>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	79fa      	ldrb	r2, [r7, #7]
 80010ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	4611      	mov	r1, r2
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <USART_IRQInterruptConfig+0x104>)
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	e7ff      	b.n	80010ce <USART_IRQInterruptConfig+0xe6>
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000e104 	.word	0xe000e104
 80010e0:	e000e10c 	.word	0xe000e10c
 80010e4:	e000e180 	.word	0xe000e180
 80010e8:	e000e184 	.word	0xe000e184
 80010ec:	e000e18c 	.word	0xe000e18c

080010f0 <USART_IRQHandling>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d021      	beq.n	800115a <USART_IRQHandling+0x6a>
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01e      	beq.n	800115a <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d119      	bne.n	800115a <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d115      	bne.n	800115a <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800113c:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8001152:	2100      	movs	r1, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff f99f 	bl	8000498 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001170:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d055      	beq.n	8001224 <USART_IRQHandling+0x134>
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d052      	beq.n	8001224 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d14d      	bne.n	8001224 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d03d      	beq.n	800120c <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7b5b      	ldrb	r3, [r3, #13]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d129      	bne.n	80011ec <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ac:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7b9b      	ldrb	r3, [r3, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	1e9a      	subs	r2, r3, #2
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	e01a      	b.n	800120c <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
 80011ea:	e00f      	b.n	800120c <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	1e5a      	subs	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001222:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d073      	beq.n	800132a <USART_IRQHandling+0x23a>
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d070      	beq.n	800132a <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800124e:	2b01      	cmp	r3, #1
 8001250:	d16b      	bne.n	800132a <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d053      	beq.n	8001302 <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7b5b      	ldrb	r3, [r3, #13]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d12f      	bne.n	80012c2 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7b9b      	ldrb	r3, [r3, #14]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800127a:	b292      	uxth	r2, r2
 800127c:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	1e9a      	subs	r2, r3, #2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	61da      	str	r2, [r3, #28]
 800129c:	e031      	b.n	8001302 <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	61da      	str	r2, [r3, #28]
 80012c0:	e01f      	b.n	8001302 <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7b9b      	ldrb	r3, [r3, #14]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d107      	bne.n	80012da <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e009      	b.n	80012ee <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0220 	bic.w	r2, r2, #32
 8001318:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001322:	2101      	movs	r1, #1
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff f8b7 	bl	8000498 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001334:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001340:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00e      	beq.n	8001372 <USART_IRQHandling+0x282>
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001368:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 800136a:	2103      	movs	r1, #3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff f893 	bl	8000498 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00f      	beq.n	80013b0 <USART_IRQHandling+0x2c0>
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	f023 0310 	bic.w	r3, r3, #16
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 80013a8:	2102      	movs	r1, #2
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff f874 	bl	8000498 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f003 0305 	and.w	r3, r3, #5
 80013c6:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <USART_IRQHandling+0x2ec>
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80013d4:	2107      	movs	r1, #7
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff f85e 	bl	8000498 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	613b      	str	r3, [r7, #16]

	if(temp2 )
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01e      	beq.n	800142c <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001400:	2105      	movs	r1, #5
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff f848 	bl	8000498 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8001412:	2106      	movs	r1, #6
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff f83f 	bl	8000498 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001424:	2107      	movs	r1, #7
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff f836 	bl	8000498 <USART_ApplicationEventCallback>
		}
	}
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <findslot>:
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <findslot+0x2c>)
 8001436:	b510      	push	{r4, lr}
 8001438:	4604      	mov	r4, r0
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	b118      	cbz	r0, 8001446 <findslot+0x12>
 800143e:	6983      	ldr	r3, [r0, #24]
 8001440:	b90b      	cbnz	r3, 8001446 <findslot+0x12>
 8001442:	f000 fb15 	bl	8001a70 <__sinit>
 8001446:	2c13      	cmp	r4, #19
 8001448:	d807      	bhi.n	800145a <findslot+0x26>
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <findslot+0x30>)
 800144c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001450:	3201      	adds	r2, #1
 8001452:	d002      	beq.n	800145a <findslot+0x26>
 8001454:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001458:	bd10      	pop	{r4, pc}
 800145a:	2000      	movs	r0, #0
 800145c:	e7fc      	b.n	8001458 <findslot+0x24>
 800145e:	bf00      	nop
 8001460:	20000030 	.word	0x20000030
 8001464:	200004e8 	.word	0x200004e8

08001468 <error>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	4604      	mov	r4, r0
 800146c:	f000 faa2 	bl	80019b4 <__errno>
 8001470:	2613      	movs	r6, #19
 8001472:	4605      	mov	r5, r0
 8001474:	2700      	movs	r7, #0
 8001476:	4630      	mov	r0, r6
 8001478:	4639      	mov	r1, r7
 800147a:	beab      	bkpt	0x00ab
 800147c:	4606      	mov	r6, r0
 800147e:	602e      	str	r6, [r5, #0]
 8001480:	4620      	mov	r0, r4
 8001482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001484 <checkerror>:
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d101      	bne.n	800148c <checkerror+0x8>
 8001488:	f7ff bfee 	b.w	8001468 <error>
 800148c:	4770      	bx	lr

0800148e <_swiread>:
 800148e:	b530      	push	{r4, r5, lr}
 8001490:	b085      	sub	sp, #20
 8001492:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001496:	9203      	str	r2, [sp, #12]
 8001498:	2406      	movs	r4, #6
 800149a:	ad01      	add	r5, sp, #4
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	beab      	bkpt	0x00ab
 80014a2:	4604      	mov	r4, r0
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ffed 	bl	8001484 <checkerror>
 80014aa:	b005      	add	sp, #20
 80014ac:	bd30      	pop	{r4, r5, pc}

080014ae <_read>:
 80014ae:	b570      	push	{r4, r5, r6, lr}
 80014b0:	460e      	mov	r6, r1
 80014b2:	4615      	mov	r5, r2
 80014b4:	f7ff ffbe 	bl	8001434 <findslot>
 80014b8:	4604      	mov	r4, r0
 80014ba:	b930      	cbnz	r0, 80014ca <_read+0x1c>
 80014bc:	f000 fa7a 	bl	80019b4 <__errno>
 80014c0:	2309      	movs	r3, #9
 80014c2:	6003      	str	r3, [r0, #0]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	6800      	ldr	r0, [r0, #0]
 80014cc:	462a      	mov	r2, r5
 80014ce:	4631      	mov	r1, r6
 80014d0:	f7ff ffdd 	bl	800148e <_swiread>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	bf1f      	itttt	ne
 80014d8:	6863      	ldrne	r3, [r4, #4]
 80014da:	1a28      	subne	r0, r5, r0
 80014dc:	181b      	addne	r3, r3, r0
 80014de:	6063      	strne	r3, [r4, #4]
 80014e0:	e7f2      	b.n	80014c8 <_read+0x1a>

080014e2 <_swilseek>:
 80014e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014e4:	460c      	mov	r4, r1
 80014e6:	4616      	mov	r6, r2
 80014e8:	f7ff ffa4 	bl	8001434 <findslot>
 80014ec:	4605      	mov	r5, r0
 80014ee:	b940      	cbnz	r0, 8001502 <_swilseek+0x20>
 80014f0:	f000 fa60 	bl	80019b4 <__errno>
 80014f4:	2309      	movs	r3, #9
 80014f6:	6003      	str	r3, [r0, #0]
 80014f8:	f04f 34ff 	mov.w	r4, #4294967295
 80014fc:	4620      	mov	r0, r4
 80014fe:	b003      	add	sp, #12
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	2e02      	cmp	r6, #2
 8001504:	d903      	bls.n	800150e <_swilseek+0x2c>
 8001506:	f000 fa55 	bl	80019b4 <__errno>
 800150a:	2316      	movs	r3, #22
 800150c:	e7f3      	b.n	80014f6 <_swilseek+0x14>
 800150e:	2e01      	cmp	r6, #1
 8001510:	d112      	bne.n	8001538 <_swilseek+0x56>
 8001512:	6843      	ldr	r3, [r0, #4]
 8001514:	18e4      	adds	r4, r4, r3
 8001516:	d4f6      	bmi.n	8001506 <_swilseek+0x24>
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	260a      	movs	r6, #10
 800151c:	e9cd 3400 	strd	r3, r4, [sp]
 8001520:	466f      	mov	r7, sp
 8001522:	4630      	mov	r0, r6
 8001524:	4639      	mov	r1, r7
 8001526:	beab      	bkpt	0x00ab
 8001528:	4606      	mov	r6, r0
 800152a:	4630      	mov	r0, r6
 800152c:	f7ff ffaa 	bl	8001484 <checkerror>
 8001530:	2800      	cmp	r0, #0
 8001532:	dbe1      	blt.n	80014f8 <_swilseek+0x16>
 8001534:	606c      	str	r4, [r5, #4]
 8001536:	e7e1      	b.n	80014fc <_swilseek+0x1a>
 8001538:	2e02      	cmp	r6, #2
 800153a:	d1ed      	bne.n	8001518 <_swilseek+0x36>
 800153c:	6803      	ldr	r3, [r0, #0]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	260c      	movs	r6, #12
 8001542:	466f      	mov	r7, sp
 8001544:	4630      	mov	r0, r6
 8001546:	4639      	mov	r1, r7
 8001548:	beab      	bkpt	0x00ab
 800154a:	4606      	mov	r6, r0
 800154c:	4630      	mov	r0, r6
 800154e:	f7ff ff99 	bl	8001484 <checkerror>
 8001552:	1c43      	adds	r3, r0, #1
 8001554:	d0d0      	beq.n	80014f8 <_swilseek+0x16>
 8001556:	4404      	add	r4, r0
 8001558:	e7de      	b.n	8001518 <_swilseek+0x36>

0800155a <_lseek>:
 800155a:	f7ff bfc2 	b.w	80014e2 <_swilseek>

0800155e <_swiwrite>:
 800155e:	b530      	push	{r4, r5, lr}
 8001560:	b085      	sub	sp, #20
 8001562:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001566:	9203      	str	r2, [sp, #12]
 8001568:	2405      	movs	r4, #5
 800156a:	ad01      	add	r5, sp, #4
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	beab      	bkpt	0x00ab
 8001572:	4604      	mov	r4, r0
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff ff85 	bl	8001484 <checkerror>
 800157a:	b005      	add	sp, #20
 800157c:	bd30      	pop	{r4, r5, pc}

0800157e <_write>:
 800157e:	b570      	push	{r4, r5, r6, lr}
 8001580:	460e      	mov	r6, r1
 8001582:	4615      	mov	r5, r2
 8001584:	f7ff ff56 	bl	8001434 <findslot>
 8001588:	4604      	mov	r4, r0
 800158a:	b930      	cbnz	r0, 800159a <_write+0x1c>
 800158c:	f000 fa12 	bl	80019b4 <__errno>
 8001590:	2309      	movs	r3, #9
 8001592:	6003      	str	r3, [r0, #0]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	bd70      	pop	{r4, r5, r6, pc}
 800159a:	6800      	ldr	r0, [r0, #0]
 800159c:	462a      	mov	r2, r5
 800159e:	4631      	mov	r1, r6
 80015a0:	f7ff ffdd 	bl	800155e <_swiwrite>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	dbf5      	blt.n	8001594 <_write+0x16>
 80015a8:	6862      	ldr	r2, [r4, #4]
 80015aa:	1ae8      	subs	r0, r5, r3
 80015ac:	4402      	add	r2, r0
 80015ae:	42ab      	cmp	r3, r5
 80015b0:	6062      	str	r2, [r4, #4]
 80015b2:	d1f1      	bne.n	8001598 <_write+0x1a>
 80015b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff bf55 	b.w	8001468 <error>

080015be <_swiclose>:
 80015be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015c0:	2402      	movs	r4, #2
 80015c2:	9001      	str	r0, [sp, #4]
 80015c4:	ad01      	add	r5, sp, #4
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	beab      	bkpt	0x00ab
 80015cc:	4604      	mov	r4, r0
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff ff58 	bl	8001484 <checkerror>
 80015d4:	b003      	add	sp, #12
 80015d6:	bd30      	pop	{r4, r5, pc}

080015d8 <_close>:
 80015d8:	b538      	push	{r3, r4, r5, lr}
 80015da:	4605      	mov	r5, r0
 80015dc:	f7ff ff2a 	bl	8001434 <findslot>
 80015e0:	4604      	mov	r4, r0
 80015e2:	b930      	cbnz	r0, 80015f2 <_close+0x1a>
 80015e4:	f000 f9e6 	bl	80019b4 <__errno>
 80015e8:	2309      	movs	r3, #9
 80015ea:	6003      	str	r3, [r0, #0]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
 80015f2:	3d01      	subs	r5, #1
 80015f4:	2d01      	cmp	r5, #1
 80015f6:	d809      	bhi.n	800160c <_close+0x34>
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <_close+0x48>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d104      	bne.n	800160c <_close+0x34>
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	6003      	str	r3, [r0, #0]
 8001608:	2000      	movs	r0, #0
 800160a:	e7f1      	b.n	80015f0 <_close+0x18>
 800160c:	6820      	ldr	r0, [r4, #0]
 800160e:	f7ff ffd6 	bl	80015be <_swiclose>
 8001612:	2800      	cmp	r0, #0
 8001614:	d1ec      	bne.n	80015f0 <_close+0x18>
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	6023      	str	r3, [r4, #0]
 800161c:	e7e8      	b.n	80015f0 <_close+0x18>
 800161e:	bf00      	nop
 8001620:	200004e8 	.word	0x200004e8

08001624 <_sbrk>:
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <_sbrk+0x38>)
 8001626:	6811      	ldr	r1, [r2, #0]
 8001628:	b510      	push	{r4, lr}
 800162a:	4603      	mov	r3, r0
 800162c:	b909      	cbnz	r1, 8001632 <_sbrk+0xe>
 800162e:	490c      	ldr	r1, [pc, #48]	; (8001660 <_sbrk+0x3c>)
 8001630:	6011      	str	r1, [r2, #0]
 8001632:	6810      	ldr	r0, [r2, #0]
 8001634:	4669      	mov	r1, sp
 8001636:	4403      	add	r3, r0
 8001638:	428b      	cmp	r3, r1
 800163a:	d806      	bhi.n	800164a <_sbrk+0x26>
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <_sbrk+0x40>)
 800163e:	4c0a      	ldr	r4, [pc, #40]	; (8001668 <_sbrk+0x44>)
 8001640:	6809      	ldr	r1, [r1, #0]
 8001642:	42a1      	cmp	r1, r4
 8001644:	d008      	beq.n	8001658 <_sbrk+0x34>
 8001646:	428b      	cmp	r3, r1
 8001648:	d906      	bls.n	8001658 <_sbrk+0x34>
 800164a:	f000 f9b3 	bl	80019b4 <__errno>
 800164e:	230c      	movs	r3, #12
 8001650:	6003      	str	r3, [r0, #0]
 8001652:	f04f 30ff 	mov.w	r0, #4294967295
 8001656:	bd10      	pop	{r4, pc}
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e7fc      	b.n	8001656 <_sbrk+0x32>
 800165c:	200004d8 	.word	0x200004d8
 8001660:	20000598 	.word	0x20000598
 8001664:	20000024 	.word	0x20000024
 8001668:	cafedead 	.word	0xcafedead

0800166c <_swistat>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	460c      	mov	r4, r1
 8001670:	f7ff fee0 	bl	8001434 <findslot>
 8001674:	4605      	mov	r5, r0
 8001676:	b930      	cbnz	r0, 8001686 <_swistat+0x1a>
 8001678:	f000 f99c 	bl	80019b4 <__errno>
 800167c:	2309      	movs	r3, #9
 800167e:	6003      	str	r3, [r0, #0]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	bd70      	pop	{r4, r5, r6, pc}
 8001686:	6863      	ldr	r3, [r4, #4]
 8001688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	64a3      	str	r3, [r4, #72]	; 0x48
 8001694:	260c      	movs	r6, #12
 8001696:	4630      	mov	r0, r6
 8001698:	4629      	mov	r1, r5
 800169a:	beab      	bkpt	0x00ab
 800169c:	4605      	mov	r5, r0
 800169e:	4628      	mov	r0, r5
 80016a0:	f7ff fef0 	bl	8001484 <checkerror>
 80016a4:	1c43      	adds	r3, r0, #1
 80016a6:	bf1c      	itt	ne
 80016a8:	6120      	strne	r0, [r4, #16]
 80016aa:	2000      	movne	r0, #0
 80016ac:	e7ea      	b.n	8001684 <_swistat+0x18>

080016ae <_fstat>:
 80016ae:	460b      	mov	r3, r1
 80016b0:	b510      	push	{r4, lr}
 80016b2:	2100      	movs	r1, #0
 80016b4:	4604      	mov	r4, r0
 80016b6:	2258      	movs	r2, #88	; 0x58
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fa9e 	bl	8001bfa <memset>
 80016be:	4601      	mov	r1, r0
 80016c0:	4620      	mov	r0, r4
 80016c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c6:	f7ff bfd1 	b.w	800166c <_swistat>

080016ca <_stat>:
 80016ca:	b538      	push	{r3, r4, r5, lr}
 80016cc:	460d      	mov	r5, r1
 80016ce:	4604      	mov	r4, r0
 80016d0:	2258      	movs	r2, #88	; 0x58
 80016d2:	2100      	movs	r1, #0
 80016d4:	4628      	mov	r0, r5
 80016d6:	f000 fa90 	bl	8001bfa <memset>
 80016da:	4620      	mov	r0, r4
 80016dc:	2100      	movs	r1, #0
 80016de:	f000 f811 	bl	8001704 <_swiopen>
 80016e2:	1c43      	adds	r3, r0, #1
 80016e4:	4604      	mov	r4, r0
 80016e6:	d00b      	beq.n	8001700 <_stat+0x36>
 80016e8:	686b      	ldr	r3, [r5, #4]
 80016ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80016ee:	606b      	str	r3, [r5, #4]
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7ff ffbb 	bl	800166c <_swistat>
 80016f6:	4605      	mov	r5, r0
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff ff6d 	bl	80015d8 <_close>
 80016fe:	462c      	mov	r4, r5
 8001700:	4620      	mov	r0, r4
 8001702:	bd38      	pop	{r3, r4, r5, pc}

08001704 <_swiopen>:
 8001704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001708:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80017b4 <_swiopen+0xb0>
 800170c:	b097      	sub	sp, #92	; 0x5c
 800170e:	4607      	mov	r7, r0
 8001710:	460e      	mov	r6, r1
 8001712:	2500      	movs	r5, #0
 8001714:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001718:	1c61      	adds	r1, r4, #1
 800171a:	d037      	beq.n	800178c <_swiopen+0x88>
 800171c:	3501      	adds	r5, #1
 800171e:	2d14      	cmp	r5, #20
 8001720:	d1f8      	bne.n	8001714 <_swiopen+0x10>
 8001722:	f000 f947 	bl	80019b4 <__errno>
 8001726:	2318      	movs	r3, #24
 8001728:	6003      	str	r3, [r0, #0]
 800172a:	f04f 34ff 	mov.w	r4, #4294967295
 800172e:	e03d      	b.n	80017ac <_swiopen+0xa8>
 8001730:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001734:	f240 6301 	movw	r3, #1537	; 0x601
 8001738:	07b2      	lsls	r2, r6, #30
 800173a:	bf48      	it	mi
 800173c:	f044 0402 	orrmi.w	r4, r4, #2
 8001740:	421e      	tst	r6, r3
 8001742:	bf18      	it	ne
 8001744:	f044 0404 	orrne.w	r4, r4, #4
 8001748:	0733      	lsls	r3, r6, #28
 800174a:	bf48      	it	mi
 800174c:	f024 0404 	bicmi.w	r4, r4, #4
 8001750:	4638      	mov	r0, r7
 8001752:	bf48      	it	mi
 8001754:	f044 0408 	orrmi.w	r4, r4, #8
 8001758:	9700      	str	r7, [sp, #0]
 800175a:	f7fe fd59 	bl	8000210 <strlen>
 800175e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001762:	2401      	movs	r4, #1
 8001764:	4620      	mov	r0, r4
 8001766:	4649      	mov	r1, r9
 8001768:	beab      	bkpt	0x00ab
 800176a:	4604      	mov	r4, r0
 800176c:	2c00      	cmp	r4, #0
 800176e:	db08      	blt.n	8001782 <_swiopen+0x7e>
 8001770:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001774:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001778:	2300      	movs	r3, #0
 800177a:	f8c8 3004 	str.w	r3, [r8, #4]
 800177e:	462c      	mov	r4, r5
 8001780:	e014      	b.n	80017ac <_swiopen+0xa8>
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff fe70 	bl	8001468 <error>
 8001788:	4604      	mov	r4, r0
 800178a:	e00f      	b.n	80017ac <_swiopen+0xa8>
 800178c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001790:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001794:	46e9      	mov	r9, sp
 8001796:	d1cb      	bne.n	8001730 <_swiopen+0x2c>
 8001798:	4649      	mov	r1, r9
 800179a:	4638      	mov	r0, r7
 800179c:	f7ff ff95 	bl	80016ca <_stat>
 80017a0:	3001      	adds	r0, #1
 80017a2:	d0c5      	beq.n	8001730 <_swiopen+0x2c>
 80017a4:	f000 f906 	bl	80019b4 <__errno>
 80017a8:	2311      	movs	r3, #17
 80017aa:	6003      	str	r3, [r0, #0]
 80017ac:	4620      	mov	r0, r4
 80017ae:	b017      	add	sp, #92	; 0x5c
 80017b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b4:	200004e8 	.word	0x200004e8

080017b8 <_get_semihosting_exts>:
 80017b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80017bc:	4606      	mov	r6, r0
 80017be:	460f      	mov	r7, r1
 80017c0:	482a      	ldr	r0, [pc, #168]	; (800186c <_get_semihosting_exts+0xb4>)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4615      	mov	r5, r2
 80017c6:	f7ff ff9d 	bl	8001704 <_swiopen>
 80017ca:	462a      	mov	r2, r5
 80017cc:	4604      	mov	r4, r0
 80017ce:	2100      	movs	r1, #0
 80017d0:	4630      	mov	r0, r6
 80017d2:	f000 fa12 	bl	8001bfa <memset>
 80017d6:	1c63      	adds	r3, r4, #1
 80017d8:	d016      	beq.n	8001808 <_get_semihosting_exts+0x50>
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fe2a 	bl	8001434 <findslot>
 80017e0:	f04f 080c 	mov.w	r8, #12
 80017e4:	4681      	mov	r9, r0
 80017e6:	4640      	mov	r0, r8
 80017e8:	4649      	mov	r1, r9
 80017ea:	beab      	bkpt	0x00ab
 80017ec:	4680      	mov	r8, r0
 80017ee:	4640      	mov	r0, r8
 80017f0:	f7ff fe48 	bl	8001484 <checkerror>
 80017f4:	2803      	cmp	r0, #3
 80017f6:	dd02      	ble.n	80017fe <_get_semihosting_exts+0x46>
 80017f8:	1ec3      	subs	r3, r0, #3
 80017fa:	42ab      	cmp	r3, r5
 80017fc:	dc08      	bgt.n	8001810 <_get_semihosting_exts+0x58>
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff feea 	bl	80015d8 <_close>
 8001804:	f04f 34ff 	mov.w	r4, #4294967295
 8001808:	4620      	mov	r0, r4
 800180a:	b003      	add	sp, #12
 800180c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001810:	2204      	movs	r2, #4
 8001812:	eb0d 0102 	add.w	r1, sp, r2
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff fe49 	bl	80014ae <_read>
 800181c:	2803      	cmp	r0, #3
 800181e:	ddee      	ble.n	80017fe <_get_semihosting_exts+0x46>
 8001820:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001824:	2b53      	cmp	r3, #83	; 0x53
 8001826:	d1ea      	bne.n	80017fe <_get_semihosting_exts+0x46>
 8001828:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800182c:	2b48      	cmp	r3, #72	; 0x48
 800182e:	d1e6      	bne.n	80017fe <_get_semihosting_exts+0x46>
 8001830:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001834:	2b46      	cmp	r3, #70	; 0x46
 8001836:	d1e2      	bne.n	80017fe <_get_semihosting_exts+0x46>
 8001838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800183c:	2b42      	cmp	r3, #66	; 0x42
 800183e:	d1de      	bne.n	80017fe <_get_semihosting_exts+0x46>
 8001840:	2201      	movs	r2, #1
 8001842:	4639      	mov	r1, r7
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff fe4c 	bl	80014e2 <_swilseek>
 800184a:	2800      	cmp	r0, #0
 800184c:	dbd7      	blt.n	80017fe <_get_semihosting_exts+0x46>
 800184e:	462a      	mov	r2, r5
 8001850:	4631      	mov	r1, r6
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff fe2b 	bl	80014ae <_read>
 8001858:	4605      	mov	r5, r0
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff febc 	bl	80015d8 <_close>
 8001860:	4628      	mov	r0, r5
 8001862:	f7ff fe0f 	bl	8001484 <checkerror>
 8001866:	4604      	mov	r4, r0
 8001868:	e7ce      	b.n	8001808 <_get_semihosting_exts+0x50>
 800186a:	bf00      	nop
 800186c:	08002a9e 	.word	0x08002a9e

08001870 <initialise_semihosting_exts>:
 8001870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001872:	4d0a      	ldr	r5, [pc, #40]	; (800189c <initialise_semihosting_exts+0x2c>)
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <initialise_semihosting_exts+0x30>)
 8001876:	2100      	movs	r1, #0
 8001878:	2201      	movs	r2, #1
 800187a:	a801      	add	r0, sp, #4
 800187c:	6029      	str	r1, [r5, #0]
 800187e:	6022      	str	r2, [r4, #0]
 8001880:	f7ff ff9a 	bl	80017b8 <_get_semihosting_exts>
 8001884:	2800      	cmp	r0, #0
 8001886:	dd07      	ble.n	8001898 <initialise_semihosting_exts+0x28>
 8001888:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	602a      	str	r2, [r5, #0]
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	b003      	add	sp, #12
 800189a:	bd30      	pop	{r4, r5, pc}
 800189c:	20000028 	.word	0x20000028
 80018a0:	2000002c 	.word	0x2000002c

080018a4 <_has_ext_stdout_stderr>:
 80018a4:	b510      	push	{r4, lr}
 80018a6:	4c04      	ldr	r4, [pc, #16]	; (80018b8 <_has_ext_stdout_stderr+0x14>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da01      	bge.n	80018b2 <_has_ext_stdout_stderr+0xe>
 80018ae:	f7ff ffdf 	bl	8001870 <initialise_semihosting_exts>
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	bd10      	pop	{r4, pc}
 80018b6:	bf00      	nop
 80018b8:	2000002c 	.word	0x2000002c

080018bc <initialise_monitor_handles>:
 80018bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c0:	b085      	sub	sp, #20
 80018c2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001968 <initialise_monitor_handles+0xac>
 80018c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80018ca:	2303      	movs	r3, #3
 80018cc:	2400      	movs	r4, #0
 80018ce:	9303      	str	r3, [sp, #12]
 80018d0:	af01      	add	r7, sp, #4
 80018d2:	9402      	str	r4, [sp, #8]
 80018d4:	2501      	movs	r5, #1
 80018d6:	4628      	mov	r0, r5
 80018d8:	4639      	mov	r1, r7
 80018da:	beab      	bkpt	0x00ab
 80018dc:	4605      	mov	r5, r0
 80018de:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800196c <initialise_monitor_handles+0xb0>
 80018e2:	4623      	mov	r3, r4
 80018e4:	4c22      	ldr	r4, [pc, #136]	; (8001970 <initialise_monitor_handles+0xb4>)
 80018e6:	f8c8 5000 	str.w	r5, [r8]
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295
 80018ee:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80018f2:	3301      	adds	r3, #1
 80018f4:	2b14      	cmp	r3, #20
 80018f6:	d1fa      	bne.n	80018ee <initialise_monitor_handles+0x32>
 80018f8:	f7ff ffd4 	bl	80018a4 <_has_ext_stdout_stderr>
 80018fc:	4d1d      	ldr	r5, [pc, #116]	; (8001974 <initialise_monitor_handles+0xb8>)
 80018fe:	b1d0      	cbz	r0, 8001936 <initialise_monitor_handles+0x7a>
 8001900:	f04f 0a03 	mov.w	sl, #3
 8001904:	2304      	movs	r3, #4
 8001906:	f8cd 9004 	str.w	r9, [sp, #4]
 800190a:	2601      	movs	r6, #1
 800190c:	f8cd a00c 	str.w	sl, [sp, #12]
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	4630      	mov	r0, r6
 8001914:	4639      	mov	r1, r7
 8001916:	beab      	bkpt	0x00ab
 8001918:	4683      	mov	fp, r0
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <initialise_monitor_handles+0xbc>)
 800191c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001920:	f8c3 b000 	str.w	fp, [r3]
 8001924:	2308      	movs	r3, #8
 8001926:	f8cd a00c 	str.w	sl, [sp, #12]
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	4630      	mov	r0, r6
 800192e:	4639      	mov	r1, r7
 8001930:	beab      	bkpt	0x00ab
 8001932:	4606      	mov	r6, r0
 8001934:	602e      	str	r6, [r5, #0]
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	bf02      	ittt	eq
 800193c:	4b0e      	ldreq	r3, [pc, #56]	; (8001978 <initialise_monitor_handles+0xbc>)
 800193e:	681b      	ldreq	r3, [r3, #0]
 8001940:	602b      	streq	r3, [r5, #0]
 8001942:	2600      	movs	r6, #0
 8001944:	f8d8 3000 	ldr.w	r3, [r8]
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	6066      	str	r6, [r4, #4]
 800194c:	f7ff ffaa 	bl	80018a4 <_has_ext_stdout_stderr>
 8001950:	b130      	cbz	r0, 8001960 <initialise_monitor_handles+0xa4>
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <initialise_monitor_handles+0xbc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001960:	b005      	add	sp, #20
 8001962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001966:	bf00      	nop
 8001968:	08002ab4 	.word	0x08002ab4
 800196c:	200004e0 	.word	0x200004e0
 8001970:	200004e8 	.word	0x200004e8
 8001974:	200004dc 	.word	0x200004dc
 8001978:	200004e4 	.word	0x200004e4

0800197c <_isatty>:
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	f7ff fd59 	bl	8001434 <findslot>
 8001982:	2509      	movs	r5, #9
 8001984:	4604      	mov	r4, r0
 8001986:	b920      	cbnz	r0, 8001992 <_isatty+0x16>
 8001988:	f000 f814 	bl	80019b4 <__errno>
 800198c:	6005      	str	r5, [r0, #0]
 800198e:	4620      	mov	r0, r4
 8001990:	bd70      	pop	{r4, r5, r6, pc}
 8001992:	4628      	mov	r0, r5
 8001994:	4621      	mov	r1, r4
 8001996:	beab      	bkpt	0x00ab
 8001998:	4604      	mov	r4, r0
 800199a:	2c01      	cmp	r4, #1
 800199c:	d0f7      	beq.n	800198e <_isatty+0x12>
 800199e:	f000 f809 	bl	80019b4 <__errno>
 80019a2:	2400      	movs	r4, #0
 80019a4:	4605      	mov	r5, r0
 80019a6:	2613      	movs	r6, #19
 80019a8:	4630      	mov	r0, r6
 80019aa:	4621      	mov	r1, r4
 80019ac:	beab      	bkpt	0x00ab
 80019ae:	4606      	mov	r6, r0
 80019b0:	602e      	str	r6, [r5, #0]
 80019b2:	e7ec      	b.n	800198e <_isatty+0x12>

080019b4 <__errno>:
 80019b4:	4b01      	ldr	r3, [pc, #4]	; (80019bc <__errno+0x8>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000030 	.word	0x20000030

080019c0 <std>:
 80019c0:	2300      	movs	r3, #0
 80019c2:	b510      	push	{r4, lr}
 80019c4:	4604      	mov	r4, r0
 80019c6:	e9c0 3300 	strd	r3, r3, [r0]
 80019ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019ce:	6083      	str	r3, [r0, #8]
 80019d0:	8181      	strh	r1, [r0, #12]
 80019d2:	6643      	str	r3, [r0, #100]	; 0x64
 80019d4:	81c2      	strh	r2, [r0, #14]
 80019d6:	6183      	str	r3, [r0, #24]
 80019d8:	4619      	mov	r1, r3
 80019da:	2208      	movs	r2, #8
 80019dc:	305c      	adds	r0, #92	; 0x5c
 80019de:	f000 f90c 	bl	8001bfa <memset>
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <std+0x38>)
 80019e4:	6263      	str	r3, [r4, #36]	; 0x24
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <std+0x3c>)
 80019e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <std+0x40>)
 80019ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <std+0x44>)
 80019f0:	6224      	str	r4, [r4, #32]
 80019f2:	6323      	str	r3, [r4, #48]	; 0x30
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	bf00      	nop
 80019f8:	08001e71 	.word	0x08001e71
 80019fc:	08001e93 	.word	0x08001e93
 8001a00:	08001ecb 	.word	0x08001ecb
 8001a04:	08001eef 	.word	0x08001eef

08001a08 <_cleanup_r>:
 8001a08:	4901      	ldr	r1, [pc, #4]	; (8001a10 <_cleanup_r+0x8>)
 8001a0a:	f000 b8af 	b.w	8001b6c <_fwalk_reent>
 8001a0e:	bf00      	nop
 8001a10:	080021c1 	.word	0x080021c1

08001a14 <__sfmoreglue>:
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	2268      	movs	r2, #104	; 0x68
 8001a18:	1e4d      	subs	r5, r1, #1
 8001a1a:	4355      	muls	r5, r2
 8001a1c:	460e      	mov	r6, r1
 8001a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a22:	f000 f913 	bl	8001c4c <_malloc_r>
 8001a26:	4604      	mov	r4, r0
 8001a28:	b140      	cbz	r0, 8001a3c <__sfmoreglue+0x28>
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8001a30:	300c      	adds	r0, #12
 8001a32:	60a0      	str	r0, [r4, #8]
 8001a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a38:	f000 f8df 	bl	8001bfa <memset>
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}

08001a40 <__sfp_lock_acquire>:
 8001a40:	4801      	ldr	r0, [pc, #4]	; (8001a48 <__sfp_lock_acquire+0x8>)
 8001a42:	f000 b8d8 	b.w	8001bf6 <__retarget_lock_acquire_recursive>
 8001a46:	bf00      	nop
 8001a48:	20000589 	.word	0x20000589

08001a4c <__sfp_lock_release>:
 8001a4c:	4801      	ldr	r0, [pc, #4]	; (8001a54 <__sfp_lock_release+0x8>)
 8001a4e:	f000 b8d3 	b.w	8001bf8 <__retarget_lock_release_recursive>
 8001a52:	bf00      	nop
 8001a54:	20000589 	.word	0x20000589

08001a58 <__sinit_lock_acquire>:
 8001a58:	4801      	ldr	r0, [pc, #4]	; (8001a60 <__sinit_lock_acquire+0x8>)
 8001a5a:	f000 b8cc 	b.w	8001bf6 <__retarget_lock_acquire_recursive>
 8001a5e:	bf00      	nop
 8001a60:	2000058a 	.word	0x2000058a

08001a64 <__sinit_lock_release>:
 8001a64:	4801      	ldr	r0, [pc, #4]	; (8001a6c <__sinit_lock_release+0x8>)
 8001a66:	f000 b8c7 	b.w	8001bf8 <__retarget_lock_release_recursive>
 8001a6a:	bf00      	nop
 8001a6c:	2000058a 	.word	0x2000058a

08001a70 <__sinit>:
 8001a70:	b510      	push	{r4, lr}
 8001a72:	4604      	mov	r4, r0
 8001a74:	f7ff fff0 	bl	8001a58 <__sinit_lock_acquire>
 8001a78:	69a3      	ldr	r3, [r4, #24]
 8001a7a:	b11b      	cbz	r3, 8001a84 <__sinit+0x14>
 8001a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a80:	f7ff bff0 	b.w	8001a64 <__sinit_lock_release>
 8001a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001a88:	6523      	str	r3, [r4, #80]	; 0x50
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <__sinit+0x68>)
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <__sinit+0x6c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8001a92:	42a3      	cmp	r3, r4
 8001a94:	bf04      	itt	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	61a3      	streq	r3, [r4, #24]
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f000 f820 	bl	8001ae0 <__sfp>
 8001aa0:	6060      	str	r0, [r4, #4]
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f000 f81c 	bl	8001ae0 <__sfp>
 8001aa8:	60a0      	str	r0, [r4, #8]
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f000 f818 	bl	8001ae0 <__sfp>
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60e0      	str	r0, [r4, #12]
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	6860      	ldr	r0, [r4, #4]
 8001ab8:	f7ff ff82 	bl	80019c0 <std>
 8001abc:	68a0      	ldr	r0, [r4, #8]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2109      	movs	r1, #9
 8001ac2:	f7ff ff7d 	bl	80019c0 <std>
 8001ac6:	68e0      	ldr	r0, [r4, #12]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	2112      	movs	r1, #18
 8001acc:	f7ff ff78 	bl	80019c0 <std>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61a3      	str	r3, [r4, #24]
 8001ad4:	e7d2      	b.n	8001a7c <__sinit+0xc>
 8001ad6:	bf00      	nop
 8001ad8:	08002b18 	.word	0x08002b18
 8001adc:	08001a09 	.word	0x08001a09

08001ae0 <__sfp>:
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae2:	4607      	mov	r7, r0
 8001ae4:	f7ff ffac 	bl	8001a40 <__sfp_lock_acquire>
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <__sfp+0x84>)
 8001aea:	681e      	ldr	r6, [r3, #0]
 8001aec:	69b3      	ldr	r3, [r6, #24]
 8001aee:	b913      	cbnz	r3, 8001af6 <__sfp+0x16>
 8001af0:	4630      	mov	r0, r6
 8001af2:	f7ff ffbd 	bl	8001a70 <__sinit>
 8001af6:	3648      	adds	r6, #72	; 0x48
 8001af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	d503      	bpl.n	8001b08 <__sfp+0x28>
 8001b00:	6833      	ldr	r3, [r6, #0]
 8001b02:	b30b      	cbz	r3, 8001b48 <__sfp+0x68>
 8001b04:	6836      	ldr	r6, [r6, #0]
 8001b06:	e7f7      	b.n	8001af8 <__sfp+0x18>
 8001b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b0c:	b9d5      	cbnz	r5, 8001b44 <__sfp+0x64>
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <__sfp+0x88>)
 8001b10:	60e3      	str	r3, [r4, #12]
 8001b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b16:	6665      	str	r5, [r4, #100]	; 0x64
 8001b18:	f000 f86c 	bl	8001bf4 <__retarget_lock_init_recursive>
 8001b1c:	f7ff ff96 	bl	8001a4c <__sfp_lock_release>
 8001b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001b28:	6025      	str	r5, [r4, #0]
 8001b2a:	61a5      	str	r5, [r4, #24]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b34:	f000 f861 	bl	8001bfa <memset>
 8001b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b40:	4620      	mov	r0, r4
 8001b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b44:	3468      	adds	r4, #104	; 0x68
 8001b46:	e7d9      	b.n	8001afc <__sfp+0x1c>
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	f7ff ff62 	bl	8001a14 <__sfmoreglue>
 8001b50:	4604      	mov	r4, r0
 8001b52:	6030      	str	r0, [r6, #0]
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d1d5      	bne.n	8001b04 <__sfp+0x24>
 8001b58:	f7ff ff78 	bl	8001a4c <__sfp_lock_release>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	e7ee      	b.n	8001b40 <__sfp+0x60>
 8001b62:	bf00      	nop
 8001b64:	08002b18 	.word	0x08002b18
 8001b68:	ffff0001 	.word	0xffff0001

08001b6c <_fwalk_reent>:
 8001b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b70:	4606      	mov	r6, r0
 8001b72:	4688      	mov	r8, r1
 8001b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b78:	2700      	movs	r7, #0
 8001b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8001b82:	d505      	bpl.n	8001b90 <_fwalk_reent+0x24>
 8001b84:	6824      	ldr	r4, [r4, #0]
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	d1f7      	bne.n	8001b7a <_fwalk_reent+0xe>
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b90:	89ab      	ldrh	r3, [r5, #12]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d907      	bls.n	8001ba6 <_fwalk_reent+0x3a>
 8001b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	d003      	beq.n	8001ba6 <_fwalk_reent+0x3a>
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	47c0      	blx	r8
 8001ba4:	4307      	orrs	r7, r0
 8001ba6:	3568      	adds	r5, #104	; 0x68
 8001ba8:	e7e9      	b.n	8001b7e <_fwalk_reent+0x12>
	...

08001bac <__libc_init_array>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	4d0d      	ldr	r5, [pc, #52]	; (8001be4 <__libc_init_array+0x38>)
 8001bb0:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <__libc_init_array+0x3c>)
 8001bb2:	1b64      	subs	r4, r4, r5
 8001bb4:	10a4      	asrs	r4, r4, #2
 8001bb6:	2600      	movs	r6, #0
 8001bb8:	42a6      	cmp	r6, r4
 8001bba:	d109      	bne.n	8001bd0 <__libc_init_array+0x24>
 8001bbc:	4d0b      	ldr	r5, [pc, #44]	; (8001bec <__libc_init_array+0x40>)
 8001bbe:	4c0c      	ldr	r4, [pc, #48]	; (8001bf0 <__libc_init_array+0x44>)
 8001bc0:	f000 ff28 	bl	8002a14 <_init>
 8001bc4:	1b64      	subs	r4, r4, r5
 8001bc6:	10a4      	asrs	r4, r4, #2
 8001bc8:	2600      	movs	r6, #0
 8001bca:	42a6      	cmp	r6, r4
 8001bcc:	d105      	bne.n	8001bda <__libc_init_array+0x2e>
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd4:	4798      	blx	r3
 8001bd6:	3601      	adds	r6, #1
 8001bd8:	e7ee      	b.n	8001bb8 <__libc_init_array+0xc>
 8001bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bde:	4798      	blx	r3
 8001be0:	3601      	adds	r6, #1
 8001be2:	e7f2      	b.n	8001bca <__libc_init_array+0x1e>
 8001be4:	08002b50 	.word	0x08002b50
 8001be8:	08002b50 	.word	0x08002b50
 8001bec:	08002b50 	.word	0x08002b50
 8001bf0:	08002b54 	.word	0x08002b54

08001bf4 <__retarget_lock_init_recursive>:
 8001bf4:	4770      	bx	lr

08001bf6 <__retarget_lock_acquire_recursive>:
 8001bf6:	4770      	bx	lr

08001bf8 <__retarget_lock_release_recursive>:
 8001bf8:	4770      	bx	lr

08001bfa <memset>:
 8001bfa:	4402      	add	r2, r0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d100      	bne.n	8001c04 <memset+0xa>
 8001c02:	4770      	bx	lr
 8001c04:	f803 1b01 	strb.w	r1, [r3], #1
 8001c08:	e7f9      	b.n	8001bfe <memset+0x4>
	...

08001c0c <sbrk_aligned>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	4e0e      	ldr	r6, [pc, #56]	; (8001c48 <sbrk_aligned+0x3c>)
 8001c10:	460c      	mov	r4, r1
 8001c12:	6831      	ldr	r1, [r6, #0]
 8001c14:	4605      	mov	r5, r0
 8001c16:	b911      	cbnz	r1, 8001c1e <sbrk_aligned+0x12>
 8001c18:	f000 f91a 	bl	8001e50 <_sbrk_r>
 8001c1c:	6030      	str	r0, [r6, #0]
 8001c1e:	4621      	mov	r1, r4
 8001c20:	4628      	mov	r0, r5
 8001c22:	f000 f915 	bl	8001e50 <_sbrk_r>
 8001c26:	1c43      	adds	r3, r0, #1
 8001c28:	d00a      	beq.n	8001c40 <sbrk_aligned+0x34>
 8001c2a:	1cc4      	adds	r4, r0, #3
 8001c2c:	f024 0403 	bic.w	r4, r4, #3
 8001c30:	42a0      	cmp	r0, r4
 8001c32:	d007      	beq.n	8001c44 <sbrk_aligned+0x38>
 8001c34:	1a21      	subs	r1, r4, r0
 8001c36:	4628      	mov	r0, r5
 8001c38:	f000 f90a 	bl	8001e50 <_sbrk_r>
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	d101      	bne.n	8001c44 <sbrk_aligned+0x38>
 8001c40:	f04f 34ff 	mov.w	r4, #4294967295
 8001c44:	4620      	mov	r0, r4
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	20000590 	.word	0x20000590

08001c4c <_malloc_r>:
 8001c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c50:	1ccd      	adds	r5, r1, #3
 8001c52:	f025 0503 	bic.w	r5, r5, #3
 8001c56:	3508      	adds	r5, #8
 8001c58:	2d0c      	cmp	r5, #12
 8001c5a:	bf38      	it	cc
 8001c5c:	250c      	movcc	r5, #12
 8001c5e:	2d00      	cmp	r5, #0
 8001c60:	4607      	mov	r7, r0
 8001c62:	db01      	blt.n	8001c68 <_malloc_r+0x1c>
 8001c64:	42a9      	cmp	r1, r5
 8001c66:	d905      	bls.n	8001c74 <_malloc_r+0x28>
 8001c68:	230c      	movs	r3, #12
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	2600      	movs	r6, #0
 8001c6e:	4630      	mov	r0, r6
 8001c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c74:	4e2e      	ldr	r6, [pc, #184]	; (8001d30 <_malloc_r+0xe4>)
 8001c76:	f000 fb57 	bl	8002328 <__malloc_lock>
 8001c7a:	6833      	ldr	r3, [r6, #0]
 8001c7c:	461c      	mov	r4, r3
 8001c7e:	bb34      	cbnz	r4, 8001cce <_malloc_r+0x82>
 8001c80:	4629      	mov	r1, r5
 8001c82:	4638      	mov	r0, r7
 8001c84:	f7ff ffc2 	bl	8001c0c <sbrk_aligned>
 8001c88:	1c43      	adds	r3, r0, #1
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	d14d      	bne.n	8001d2a <_malloc_r+0xde>
 8001c8e:	6834      	ldr	r4, [r6, #0]
 8001c90:	4626      	mov	r6, r4
 8001c92:	2e00      	cmp	r6, #0
 8001c94:	d140      	bne.n	8001d18 <_malloc_r+0xcc>
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	4631      	mov	r1, r6
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	eb04 0803 	add.w	r8, r4, r3
 8001ca0:	f000 f8d6 	bl	8001e50 <_sbrk_r>
 8001ca4:	4580      	cmp	r8, r0
 8001ca6:	d13a      	bne.n	8001d1e <_malloc_r+0xd2>
 8001ca8:	6821      	ldr	r1, [r4, #0]
 8001caa:	3503      	adds	r5, #3
 8001cac:	1a6d      	subs	r5, r5, r1
 8001cae:	f025 0503 	bic.w	r5, r5, #3
 8001cb2:	3508      	adds	r5, #8
 8001cb4:	2d0c      	cmp	r5, #12
 8001cb6:	bf38      	it	cc
 8001cb8:	250c      	movcc	r5, #12
 8001cba:	4629      	mov	r1, r5
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	f7ff ffa5 	bl	8001c0c <sbrk_aligned>
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d02b      	beq.n	8001d1e <_malloc_r+0xd2>
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	442b      	add	r3, r5
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	e00e      	b.n	8001cec <_malloc_r+0xa0>
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	1b52      	subs	r2, r2, r5
 8001cd2:	d41e      	bmi.n	8001d12 <_malloc_r+0xc6>
 8001cd4:	2a0b      	cmp	r2, #11
 8001cd6:	d916      	bls.n	8001d06 <_malloc_r+0xba>
 8001cd8:	1961      	adds	r1, r4, r5
 8001cda:	42a3      	cmp	r3, r4
 8001cdc:	6025      	str	r5, [r4, #0]
 8001cde:	bf18      	it	ne
 8001ce0:	6059      	strne	r1, [r3, #4]
 8001ce2:	6863      	ldr	r3, [r4, #4]
 8001ce4:	bf08      	it	eq
 8001ce6:	6031      	streq	r1, [r6, #0]
 8001ce8:	5162      	str	r2, [r4, r5]
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	4638      	mov	r0, r7
 8001cee:	f104 060b 	add.w	r6, r4, #11
 8001cf2:	f000 fb1f 	bl	8002334 <__malloc_unlock>
 8001cf6:	f026 0607 	bic.w	r6, r6, #7
 8001cfa:	1d23      	adds	r3, r4, #4
 8001cfc:	1af2      	subs	r2, r6, r3
 8001cfe:	d0b6      	beq.n	8001c6e <_malloc_r+0x22>
 8001d00:	1b9b      	subs	r3, r3, r6
 8001d02:	50a3      	str	r3, [r4, r2]
 8001d04:	e7b3      	b.n	8001c6e <_malloc_r+0x22>
 8001d06:	6862      	ldr	r2, [r4, #4]
 8001d08:	42a3      	cmp	r3, r4
 8001d0a:	bf0c      	ite	eq
 8001d0c:	6032      	streq	r2, [r6, #0]
 8001d0e:	605a      	strne	r2, [r3, #4]
 8001d10:	e7ec      	b.n	8001cec <_malloc_r+0xa0>
 8001d12:	4623      	mov	r3, r4
 8001d14:	6864      	ldr	r4, [r4, #4]
 8001d16:	e7b2      	b.n	8001c7e <_malloc_r+0x32>
 8001d18:	4634      	mov	r4, r6
 8001d1a:	6876      	ldr	r6, [r6, #4]
 8001d1c:	e7b9      	b.n	8001c92 <_malloc_r+0x46>
 8001d1e:	230c      	movs	r3, #12
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4638      	mov	r0, r7
 8001d24:	f000 fb06 	bl	8002334 <__malloc_unlock>
 8001d28:	e7a1      	b.n	8001c6e <_malloc_r+0x22>
 8001d2a:	6025      	str	r5, [r4, #0]
 8001d2c:	e7de      	b.n	8001cec <_malloc_r+0xa0>
 8001d2e:	bf00      	nop
 8001d30:	2000058c 	.word	0x2000058c

08001d34 <iprintf>:
 8001d34:	b40f      	push	{r0, r1, r2, r3}
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <iprintf+0x2c>)
 8001d38:	b513      	push	{r0, r1, r4, lr}
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	b124      	cbz	r4, 8001d48 <iprintf+0x14>
 8001d3e:	69a3      	ldr	r3, [r4, #24]
 8001d40:	b913      	cbnz	r3, 8001d48 <iprintf+0x14>
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fe94 	bl	8001a70 <__sinit>
 8001d48:	ab05      	add	r3, sp, #20
 8001d4a:	9a04      	ldr	r2, [sp, #16]
 8001d4c:	68a1      	ldr	r1, [r4, #8]
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	4620      	mov	r0, r4
 8001d52:	f000 fb67 	bl	8002424 <_vfiprintf_r>
 8001d56:	b002      	add	sp, #8
 8001d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d5c:	b004      	add	sp, #16
 8001d5e:	4770      	bx	lr
 8001d60:	20000030 	.word	0x20000030

08001d64 <_puts_r>:
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	460e      	mov	r6, r1
 8001d68:	4605      	mov	r5, r0
 8001d6a:	b118      	cbz	r0, 8001d74 <_puts_r+0x10>
 8001d6c:	6983      	ldr	r3, [r0, #24]
 8001d6e:	b90b      	cbnz	r3, 8001d74 <_puts_r+0x10>
 8001d70:	f7ff fe7e 	bl	8001a70 <__sinit>
 8001d74:	69ab      	ldr	r3, [r5, #24]
 8001d76:	68ac      	ldr	r4, [r5, #8]
 8001d78:	b913      	cbnz	r3, 8001d80 <_puts_r+0x1c>
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f7ff fe78 	bl	8001a70 <__sinit>
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <_puts_r+0xd0>)
 8001d82:	429c      	cmp	r4, r3
 8001d84:	d120      	bne.n	8001dc8 <_puts_r+0x64>
 8001d86:	686c      	ldr	r4, [r5, #4]
 8001d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d8a:	07db      	lsls	r3, r3, #31
 8001d8c:	d405      	bmi.n	8001d9a <_puts_r+0x36>
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	0598      	lsls	r0, r3, #22
 8001d92:	d402      	bmi.n	8001d9a <_puts_r+0x36>
 8001d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d96:	f7ff ff2e 	bl	8001bf6 <__retarget_lock_acquire_recursive>
 8001d9a:	89a3      	ldrh	r3, [r4, #12]
 8001d9c:	0719      	lsls	r1, r3, #28
 8001d9e:	d51d      	bpl.n	8001ddc <_puts_r+0x78>
 8001da0:	6923      	ldr	r3, [r4, #16]
 8001da2:	b1db      	cbz	r3, 8001ddc <_puts_r+0x78>
 8001da4:	3e01      	subs	r6, #1
 8001da6:	68a3      	ldr	r3, [r4, #8]
 8001da8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60a3      	str	r3, [r4, #8]
 8001db0:	bb39      	cbnz	r1, 8001e02 <_puts_r+0x9e>
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da38      	bge.n	8001e28 <_puts_r+0xc4>
 8001db6:	4622      	mov	r2, r4
 8001db8:	210a      	movs	r1, #10
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f000 f89c 	bl	8001ef8 <__swbuf_r>
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	d011      	beq.n	8001de8 <_puts_r+0x84>
 8001dc4:	250a      	movs	r5, #10
 8001dc6:	e011      	b.n	8001dec <_puts_r+0x88>
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <_puts_r+0xd4>)
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	d101      	bne.n	8001dd2 <_puts_r+0x6e>
 8001dce:	68ac      	ldr	r4, [r5, #8]
 8001dd0:	e7da      	b.n	8001d88 <_puts_r+0x24>
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <_puts_r+0xd8>)
 8001dd4:	429c      	cmp	r4, r3
 8001dd6:	bf08      	it	eq
 8001dd8:	68ec      	ldreq	r4, [r5, #12]
 8001dda:	e7d5      	b.n	8001d88 <_puts_r+0x24>
 8001ddc:	4621      	mov	r1, r4
 8001dde:	4628      	mov	r0, r5
 8001de0:	f000 f8ee 	bl	8001fc0 <__swsetup_r>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0dd      	beq.n	8001da4 <_puts_r+0x40>
 8001de8:	f04f 35ff 	mov.w	r5, #4294967295
 8001dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dee:	07da      	lsls	r2, r3, #31
 8001df0:	d405      	bmi.n	8001dfe <_puts_r+0x9a>
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	059b      	lsls	r3, r3, #22
 8001df6:	d402      	bmi.n	8001dfe <_puts_r+0x9a>
 8001df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfa:	f7ff fefd 	bl	8001bf8 <__retarget_lock_release_recursive>
 8001dfe:	4628      	mov	r0, r5
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da04      	bge.n	8001e10 <_puts_r+0xac>
 8001e06:	69a2      	ldr	r2, [r4, #24]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dc06      	bgt.n	8001e1a <_puts_r+0xb6>
 8001e0c:	290a      	cmp	r1, #10
 8001e0e:	d004      	beq.n	8001e1a <_puts_r+0xb6>
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	6022      	str	r2, [r4, #0]
 8001e16:	7019      	strb	r1, [r3, #0]
 8001e18:	e7c5      	b.n	8001da6 <_puts_r+0x42>
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f000 f86b 	bl	8001ef8 <__swbuf_r>
 8001e22:	3001      	adds	r0, #1
 8001e24:	d1bf      	bne.n	8001da6 <_puts_r+0x42>
 8001e26:	e7df      	b.n	8001de8 <_puts_r+0x84>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	250a      	movs	r5, #10
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	6022      	str	r2, [r4, #0]
 8001e30:	701d      	strb	r5, [r3, #0]
 8001e32:	e7db      	b.n	8001dec <_puts_r+0x88>
 8001e34:	08002ad8 	.word	0x08002ad8
 8001e38:	08002af8 	.word	0x08002af8
 8001e3c:	08002ab8 	.word	0x08002ab8

08001e40 <puts>:
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <puts+0xc>)
 8001e42:	4601      	mov	r1, r0
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	f7ff bf8d 	b.w	8001d64 <_puts_r>
 8001e4a:	bf00      	nop
 8001e4c:	20000030 	.word	0x20000030

08001e50 <_sbrk_r>:
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	4d06      	ldr	r5, [pc, #24]	; (8001e6c <_sbrk_r+0x1c>)
 8001e54:	2300      	movs	r3, #0
 8001e56:	4604      	mov	r4, r0
 8001e58:	4608      	mov	r0, r1
 8001e5a:	602b      	str	r3, [r5, #0]
 8001e5c:	f7ff fbe2 	bl	8001624 <_sbrk>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	d102      	bne.n	8001e6a <_sbrk_r+0x1a>
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	b103      	cbz	r3, 8001e6a <_sbrk_r+0x1a>
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	20000594 	.word	0x20000594

08001e70 <__sread>:
 8001e70:	b510      	push	{r4, lr}
 8001e72:	460c      	mov	r4, r1
 8001e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e78:	f000 fd98 	bl	80029ac <_read_r>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	bfab      	itete	ge
 8001e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e82:	89a3      	ldrhlt	r3, [r4, #12]
 8001e84:	181b      	addge	r3, r3, r0
 8001e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e8a:	bfac      	ite	ge
 8001e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e8e:	81a3      	strhlt	r3, [r4, #12]
 8001e90:	bd10      	pop	{r4, pc}

08001e92 <__swrite>:
 8001e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e96:	461f      	mov	r7, r3
 8001e98:	898b      	ldrh	r3, [r1, #12]
 8001e9a:	05db      	lsls	r3, r3, #23
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4616      	mov	r6, r2
 8001ea2:	d505      	bpl.n	8001eb0 <__swrite+0x1e>
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f000 f9c4 	bl	8002238 <_lseek_r>
 8001eb0:	89a3      	ldrh	r3, [r4, #12]
 8001eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	81a3      	strh	r3, [r4, #12]
 8001ebc:	4632      	mov	r2, r6
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec6:	f000 b869 	b.w	8001f9c <_write_r>

08001eca <__sseek>:
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	460c      	mov	r4, r1
 8001ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ed2:	f000 f9b1 	bl	8002238 <_lseek_r>
 8001ed6:	1c43      	adds	r3, r0, #1
 8001ed8:	89a3      	ldrh	r3, [r4, #12]
 8001eda:	bf15      	itete	ne
 8001edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ee6:	81a3      	strheq	r3, [r4, #12]
 8001ee8:	bf18      	it	ne
 8001eea:	81a3      	strhne	r3, [r4, #12]
 8001eec:	bd10      	pop	{r4, pc}

08001eee <__sclose>:
 8001eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef2:	f000 b8d3 	b.w	800209c <_close_r>
	...

08001ef8 <__swbuf_r>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	460e      	mov	r6, r1
 8001efc:	4614      	mov	r4, r2
 8001efe:	4605      	mov	r5, r0
 8001f00:	b118      	cbz	r0, 8001f0a <__swbuf_r+0x12>
 8001f02:	6983      	ldr	r3, [r0, #24]
 8001f04:	b90b      	cbnz	r3, 8001f0a <__swbuf_r+0x12>
 8001f06:	f7ff fdb3 	bl	8001a70 <__sinit>
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <__swbuf_r+0x98>)
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	d12b      	bne.n	8001f68 <__swbuf_r+0x70>
 8001f10:	686c      	ldr	r4, [r5, #4]
 8001f12:	69a3      	ldr	r3, [r4, #24]
 8001f14:	60a3      	str	r3, [r4, #8]
 8001f16:	89a3      	ldrh	r3, [r4, #12]
 8001f18:	071a      	lsls	r2, r3, #28
 8001f1a:	d52f      	bpl.n	8001f7c <__swbuf_r+0x84>
 8001f1c:	6923      	ldr	r3, [r4, #16]
 8001f1e:	b36b      	cbz	r3, 8001f7c <__swbuf_r+0x84>
 8001f20:	6923      	ldr	r3, [r4, #16]
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	1ac0      	subs	r0, r0, r3
 8001f26:	6963      	ldr	r3, [r4, #20]
 8001f28:	b2f6      	uxtb	r6, r6
 8001f2a:	4283      	cmp	r3, r0
 8001f2c:	4637      	mov	r7, r6
 8001f2e:	dc04      	bgt.n	8001f3a <__swbuf_r+0x42>
 8001f30:	4621      	mov	r1, r4
 8001f32:	4628      	mov	r0, r5
 8001f34:	f000 f944 	bl	80021c0 <_fflush_r>
 8001f38:	bb30      	cbnz	r0, 8001f88 <__swbuf_r+0x90>
 8001f3a:	68a3      	ldr	r3, [r4, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60a3      	str	r3, [r4, #8]
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	6022      	str	r2, [r4, #0]
 8001f46:	701e      	strb	r6, [r3, #0]
 8001f48:	6963      	ldr	r3, [r4, #20]
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	4283      	cmp	r3, r0
 8001f4e:	d004      	beq.n	8001f5a <__swbuf_r+0x62>
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	07db      	lsls	r3, r3, #31
 8001f54:	d506      	bpl.n	8001f64 <__swbuf_r+0x6c>
 8001f56:	2e0a      	cmp	r6, #10
 8001f58:	d104      	bne.n	8001f64 <__swbuf_r+0x6c>
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f000 f92f 	bl	80021c0 <_fflush_r>
 8001f62:	b988      	cbnz	r0, 8001f88 <__swbuf_r+0x90>
 8001f64:	4638      	mov	r0, r7
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <__swbuf_r+0x9c>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d101      	bne.n	8001f72 <__swbuf_r+0x7a>
 8001f6e:	68ac      	ldr	r4, [r5, #8]
 8001f70:	e7cf      	b.n	8001f12 <__swbuf_r+0x1a>
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <__swbuf_r+0xa0>)
 8001f74:	429c      	cmp	r4, r3
 8001f76:	bf08      	it	eq
 8001f78:	68ec      	ldreq	r4, [r5, #12]
 8001f7a:	e7ca      	b.n	8001f12 <__swbuf_r+0x1a>
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f000 f81e 	bl	8001fc0 <__swsetup_r>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d0cb      	beq.n	8001f20 <__swbuf_r+0x28>
 8001f88:	f04f 37ff 	mov.w	r7, #4294967295
 8001f8c:	e7ea      	b.n	8001f64 <__swbuf_r+0x6c>
 8001f8e:	bf00      	nop
 8001f90:	08002ad8 	.word	0x08002ad8
 8001f94:	08002af8 	.word	0x08002af8
 8001f98:	08002ab8 	.word	0x08002ab8

08001f9c <_write_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4d07      	ldr	r5, [pc, #28]	; (8001fbc <_write_r+0x20>)
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	4608      	mov	r0, r1
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	602a      	str	r2, [r5, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f7ff fae7 	bl	800157e <_write>
 8001fb0:	1c43      	adds	r3, r0, #1
 8001fb2:	d102      	bne.n	8001fba <_write_r+0x1e>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	b103      	cbz	r3, 8001fba <_write_r+0x1e>
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	20000594 	.word	0x20000594

08001fc0 <__swsetup_r>:
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <__swsetup_r+0xcc>)
 8001fc2:	b570      	push	{r4, r5, r6, lr}
 8001fc4:	681d      	ldr	r5, [r3, #0]
 8001fc6:	4606      	mov	r6, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	b125      	cbz	r5, 8001fd6 <__swsetup_r+0x16>
 8001fcc:	69ab      	ldr	r3, [r5, #24]
 8001fce:	b913      	cbnz	r3, 8001fd6 <__swsetup_r+0x16>
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f7ff fd4d 	bl	8001a70 <__sinit>
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <__swsetup_r+0xd0>)
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	d10f      	bne.n	8001ffc <__swsetup_r+0x3c>
 8001fdc:	686c      	ldr	r4, [r5, #4]
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fe4:	0719      	lsls	r1, r3, #28
 8001fe6:	d42c      	bmi.n	8002042 <__swsetup_r+0x82>
 8001fe8:	06dd      	lsls	r5, r3, #27
 8001fea:	d411      	bmi.n	8002010 <__swsetup_r+0x50>
 8001fec:	2309      	movs	r3, #9
 8001fee:	6033      	str	r3, [r6, #0]
 8001ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ff4:	81a3      	strh	r3, [r4, #12]
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	e03e      	b.n	800207a <__swsetup_r+0xba>
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <__swsetup_r+0xd4>)
 8001ffe:	429c      	cmp	r4, r3
 8002000:	d101      	bne.n	8002006 <__swsetup_r+0x46>
 8002002:	68ac      	ldr	r4, [r5, #8]
 8002004:	e7eb      	b.n	8001fde <__swsetup_r+0x1e>
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <__swsetup_r+0xd8>)
 8002008:	429c      	cmp	r4, r3
 800200a:	bf08      	it	eq
 800200c:	68ec      	ldreq	r4, [r5, #12]
 800200e:	e7e6      	b.n	8001fde <__swsetup_r+0x1e>
 8002010:	0758      	lsls	r0, r3, #29
 8002012:	d512      	bpl.n	800203a <__swsetup_r+0x7a>
 8002014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002016:	b141      	cbz	r1, 800202a <__swsetup_r+0x6a>
 8002018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800201c:	4299      	cmp	r1, r3
 800201e:	d002      	beq.n	8002026 <__swsetup_r+0x66>
 8002020:	4630      	mov	r0, r6
 8002022:	f000 f98d 	bl	8002340 <_free_r>
 8002026:	2300      	movs	r3, #0
 8002028:	6363      	str	r3, [r4, #52]	; 0x34
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002030:	81a3      	strh	r3, [r4, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	6063      	str	r3, [r4, #4]
 8002036:	6923      	ldr	r3, [r4, #16]
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	81a3      	strh	r3, [r4, #12]
 8002042:	6923      	ldr	r3, [r4, #16]
 8002044:	b94b      	cbnz	r3, 800205a <__swsetup_r+0x9a>
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d003      	beq.n	800205a <__swsetup_r+0x9a>
 8002052:	4621      	mov	r1, r4
 8002054:	4630      	mov	r0, r6
 8002056:	f000 f927 	bl	80022a8 <__smakebuf_r>
 800205a:	89a0      	ldrh	r0, [r4, #12]
 800205c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002060:	f010 0301 	ands.w	r3, r0, #1
 8002064:	d00a      	beq.n	800207c <__swsetup_r+0xbc>
 8002066:	2300      	movs	r3, #0
 8002068:	60a3      	str	r3, [r4, #8]
 800206a:	6963      	ldr	r3, [r4, #20]
 800206c:	425b      	negs	r3, r3
 800206e:	61a3      	str	r3, [r4, #24]
 8002070:	6923      	ldr	r3, [r4, #16]
 8002072:	b943      	cbnz	r3, 8002086 <__swsetup_r+0xc6>
 8002074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002078:	d1ba      	bne.n	8001ff0 <__swsetup_r+0x30>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	0781      	lsls	r1, r0, #30
 800207e:	bf58      	it	pl
 8002080:	6963      	ldrpl	r3, [r4, #20]
 8002082:	60a3      	str	r3, [r4, #8]
 8002084:	e7f4      	b.n	8002070 <__swsetup_r+0xb0>
 8002086:	2000      	movs	r0, #0
 8002088:	e7f7      	b.n	800207a <__swsetup_r+0xba>
 800208a:	bf00      	nop
 800208c:	20000030 	.word	0x20000030
 8002090:	08002ad8 	.word	0x08002ad8
 8002094:	08002af8 	.word	0x08002af8
 8002098:	08002ab8 	.word	0x08002ab8

0800209c <_close_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4d06      	ldr	r5, [pc, #24]	; (80020b8 <_close_r+0x1c>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	f7ff fa96 	bl	80015d8 <_close>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_close_r+0x1a>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_close_r+0x1a>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	20000594 	.word	0x20000594

080020bc <__sflush_r>:
 80020bc:	898a      	ldrh	r2, [r1, #12]
 80020be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c0:	4605      	mov	r5, r0
 80020c2:	0710      	lsls	r0, r2, #28
 80020c4:	460c      	mov	r4, r1
 80020c6:	d457      	bmi.n	8002178 <__sflush_r+0xbc>
 80020c8:	684b      	ldr	r3, [r1, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	dc04      	bgt.n	80020d8 <__sflush_r+0x1c>
 80020ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	dc01      	bgt.n	80020d8 <__sflush_r+0x1c>
 80020d4:	2000      	movs	r0, #0
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020da:	2e00      	cmp	r6, #0
 80020dc:	d0fa      	beq.n	80020d4 <__sflush_r+0x18>
 80020de:	2300      	movs	r3, #0
 80020e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020e4:	682f      	ldr	r7, [r5, #0]
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	d032      	beq.n	8002150 <__sflush_r+0x94>
 80020ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	075a      	lsls	r2, r3, #29
 80020f0:	d505      	bpl.n	80020fe <__sflush_r+0x42>
 80020f2:	6863      	ldr	r3, [r4, #4]
 80020f4:	1ac0      	subs	r0, r0, r3
 80020f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020f8:	b10b      	cbz	r3, 80020fe <__sflush_r+0x42>
 80020fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020fc:	1ac0      	subs	r0, r0, r3
 80020fe:	2300      	movs	r3, #0
 8002100:	4602      	mov	r2, r0
 8002102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002104:	6a21      	ldr	r1, [r4, #32]
 8002106:	4628      	mov	r0, r5
 8002108:	47b0      	blx	r6
 800210a:	1c43      	adds	r3, r0, #1
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	d106      	bne.n	800211e <__sflush_r+0x62>
 8002110:	6829      	ldr	r1, [r5, #0]
 8002112:	291d      	cmp	r1, #29
 8002114:	d82c      	bhi.n	8002170 <__sflush_r+0xb4>
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <__sflush_r+0x100>)
 8002118:	40ca      	lsrs	r2, r1
 800211a:	07d6      	lsls	r6, r2, #31
 800211c:	d528      	bpl.n	8002170 <__sflush_r+0xb4>
 800211e:	2200      	movs	r2, #0
 8002120:	6062      	str	r2, [r4, #4]
 8002122:	04d9      	lsls	r1, r3, #19
 8002124:	6922      	ldr	r2, [r4, #16]
 8002126:	6022      	str	r2, [r4, #0]
 8002128:	d504      	bpl.n	8002134 <__sflush_r+0x78>
 800212a:	1c42      	adds	r2, r0, #1
 800212c:	d101      	bne.n	8002132 <__sflush_r+0x76>
 800212e:	682b      	ldr	r3, [r5, #0]
 8002130:	b903      	cbnz	r3, 8002134 <__sflush_r+0x78>
 8002132:	6560      	str	r0, [r4, #84]	; 0x54
 8002134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002136:	602f      	str	r7, [r5, #0]
 8002138:	2900      	cmp	r1, #0
 800213a:	d0cb      	beq.n	80020d4 <__sflush_r+0x18>
 800213c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002140:	4299      	cmp	r1, r3
 8002142:	d002      	beq.n	800214a <__sflush_r+0x8e>
 8002144:	4628      	mov	r0, r5
 8002146:	f000 f8fb 	bl	8002340 <_free_r>
 800214a:	2000      	movs	r0, #0
 800214c:	6360      	str	r0, [r4, #52]	; 0x34
 800214e:	e7c2      	b.n	80020d6 <__sflush_r+0x1a>
 8002150:	6a21      	ldr	r1, [r4, #32]
 8002152:	2301      	movs	r3, #1
 8002154:	4628      	mov	r0, r5
 8002156:	47b0      	blx	r6
 8002158:	1c41      	adds	r1, r0, #1
 800215a:	d1c7      	bne.n	80020ec <__sflush_r+0x30>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0c4      	beq.n	80020ec <__sflush_r+0x30>
 8002162:	2b1d      	cmp	r3, #29
 8002164:	d001      	beq.n	800216a <__sflush_r+0xae>
 8002166:	2b16      	cmp	r3, #22
 8002168:	d101      	bne.n	800216e <__sflush_r+0xb2>
 800216a:	602f      	str	r7, [r5, #0]
 800216c:	e7b2      	b.n	80020d4 <__sflush_r+0x18>
 800216e:	89a3      	ldrh	r3, [r4, #12]
 8002170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002174:	81a3      	strh	r3, [r4, #12]
 8002176:	e7ae      	b.n	80020d6 <__sflush_r+0x1a>
 8002178:	690f      	ldr	r7, [r1, #16]
 800217a:	2f00      	cmp	r7, #0
 800217c:	d0aa      	beq.n	80020d4 <__sflush_r+0x18>
 800217e:	0793      	lsls	r3, r2, #30
 8002180:	680e      	ldr	r6, [r1, #0]
 8002182:	bf08      	it	eq
 8002184:	694b      	ldreq	r3, [r1, #20]
 8002186:	600f      	str	r7, [r1, #0]
 8002188:	bf18      	it	ne
 800218a:	2300      	movne	r3, #0
 800218c:	1bf6      	subs	r6, r6, r7
 800218e:	608b      	str	r3, [r1, #8]
 8002190:	2e00      	cmp	r6, #0
 8002192:	dd9f      	ble.n	80020d4 <__sflush_r+0x18>
 8002194:	6a21      	ldr	r1, [r4, #32]
 8002196:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800219a:	4633      	mov	r3, r6
 800219c:	463a      	mov	r2, r7
 800219e:	4628      	mov	r0, r5
 80021a0:	47e0      	blx	ip
 80021a2:	2800      	cmp	r0, #0
 80021a4:	dc06      	bgt.n	80021b4 <__sflush_r+0xf8>
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ac:	81a3      	strh	r3, [r4, #12]
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	e790      	b.n	80020d6 <__sflush_r+0x1a>
 80021b4:	4407      	add	r7, r0
 80021b6:	1a36      	subs	r6, r6, r0
 80021b8:	e7ea      	b.n	8002190 <__sflush_r+0xd4>
 80021ba:	bf00      	nop
 80021bc:	20400001 	.word	0x20400001

080021c0 <_fflush_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	690b      	ldr	r3, [r1, #16]
 80021c4:	4605      	mov	r5, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	b913      	cbnz	r3, 80021d0 <_fflush_r+0x10>
 80021ca:	2500      	movs	r5, #0
 80021cc:	4628      	mov	r0, r5
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	b118      	cbz	r0, 80021da <_fflush_r+0x1a>
 80021d2:	6983      	ldr	r3, [r0, #24]
 80021d4:	b90b      	cbnz	r3, 80021da <_fflush_r+0x1a>
 80021d6:	f7ff fc4b 	bl	8001a70 <__sinit>
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <_fflush_r+0x6c>)
 80021dc:	429c      	cmp	r4, r3
 80021de:	d11b      	bne.n	8002218 <_fflush_r+0x58>
 80021e0:	686c      	ldr	r4, [r5, #4]
 80021e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0ef      	beq.n	80021ca <_fflush_r+0xa>
 80021ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021ec:	07d0      	lsls	r0, r2, #31
 80021ee:	d404      	bmi.n	80021fa <_fflush_r+0x3a>
 80021f0:	0599      	lsls	r1, r3, #22
 80021f2:	d402      	bmi.n	80021fa <_fflush_r+0x3a>
 80021f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021f6:	f7ff fcfe 	bl	8001bf6 <__retarget_lock_acquire_recursive>
 80021fa:	4628      	mov	r0, r5
 80021fc:	4621      	mov	r1, r4
 80021fe:	f7ff ff5d 	bl	80020bc <__sflush_r>
 8002202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002204:	07da      	lsls	r2, r3, #31
 8002206:	4605      	mov	r5, r0
 8002208:	d4e0      	bmi.n	80021cc <_fflush_r+0xc>
 800220a:	89a3      	ldrh	r3, [r4, #12]
 800220c:	059b      	lsls	r3, r3, #22
 800220e:	d4dd      	bmi.n	80021cc <_fflush_r+0xc>
 8002210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002212:	f7ff fcf1 	bl	8001bf8 <__retarget_lock_release_recursive>
 8002216:	e7d9      	b.n	80021cc <_fflush_r+0xc>
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <_fflush_r+0x70>)
 800221a:	429c      	cmp	r4, r3
 800221c:	d101      	bne.n	8002222 <_fflush_r+0x62>
 800221e:	68ac      	ldr	r4, [r5, #8]
 8002220:	e7df      	b.n	80021e2 <_fflush_r+0x22>
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <_fflush_r+0x74>)
 8002224:	429c      	cmp	r4, r3
 8002226:	bf08      	it	eq
 8002228:	68ec      	ldreq	r4, [r5, #12]
 800222a:	e7da      	b.n	80021e2 <_fflush_r+0x22>
 800222c:	08002ad8 	.word	0x08002ad8
 8002230:	08002af8 	.word	0x08002af8
 8002234:	08002ab8 	.word	0x08002ab8

08002238 <_lseek_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	4d07      	ldr	r5, [pc, #28]	; (8002258 <_lseek_r+0x20>)
 800223c:	4604      	mov	r4, r0
 800223e:	4608      	mov	r0, r1
 8002240:	4611      	mov	r1, r2
 8002242:	2200      	movs	r2, #0
 8002244:	602a      	str	r2, [r5, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f7ff f987 	bl	800155a <_lseek>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_lseek_r+0x1e>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	b103      	cbz	r3, 8002256 <_lseek_r+0x1e>
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	20000594 	.word	0x20000594

0800225c <__swhatbuf_r>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	460e      	mov	r6, r1
 8002260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002264:	2900      	cmp	r1, #0
 8002266:	b096      	sub	sp, #88	; 0x58
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	da08      	bge.n	8002280 <__swhatbuf_r+0x24>
 800226e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	602a      	str	r2, [r5, #0]
 8002276:	061a      	lsls	r2, r3, #24
 8002278:	d410      	bmi.n	800229c <__swhatbuf_r+0x40>
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	e00e      	b.n	800229e <__swhatbuf_r+0x42>
 8002280:	466a      	mov	r2, sp
 8002282:	f000 fba5 	bl	80029d0 <_fstat_r>
 8002286:	2800      	cmp	r0, #0
 8002288:	dbf1      	blt.n	800226e <__swhatbuf_r+0x12>
 800228a:	9a01      	ldr	r2, [sp, #4]
 800228c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002294:	425a      	negs	r2, r3
 8002296:	415a      	adcs	r2, r3
 8002298:	602a      	str	r2, [r5, #0]
 800229a:	e7ee      	b.n	800227a <__swhatbuf_r+0x1e>
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	2000      	movs	r0, #0
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	b016      	add	sp, #88	; 0x58
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a8 <__smakebuf_r>:
 80022a8:	898b      	ldrh	r3, [r1, #12]
 80022aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022ac:	079d      	lsls	r5, r3, #30
 80022ae:	4606      	mov	r6, r0
 80022b0:	460c      	mov	r4, r1
 80022b2:	d507      	bpl.n	80022c4 <__smakebuf_r+0x1c>
 80022b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022b8:	6023      	str	r3, [r4, #0]
 80022ba:	6123      	str	r3, [r4, #16]
 80022bc:	2301      	movs	r3, #1
 80022be:	6163      	str	r3, [r4, #20]
 80022c0:	b002      	add	sp, #8
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	ab01      	add	r3, sp, #4
 80022c6:	466a      	mov	r2, sp
 80022c8:	f7ff ffc8 	bl	800225c <__swhatbuf_r>
 80022cc:	9900      	ldr	r1, [sp, #0]
 80022ce:	4605      	mov	r5, r0
 80022d0:	4630      	mov	r0, r6
 80022d2:	f7ff fcbb 	bl	8001c4c <_malloc_r>
 80022d6:	b948      	cbnz	r0, 80022ec <__smakebuf_r+0x44>
 80022d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022dc:	059a      	lsls	r2, r3, #22
 80022de:	d4ef      	bmi.n	80022c0 <__smakebuf_r+0x18>
 80022e0:	f023 0303 	bic.w	r3, r3, #3
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	e7e3      	b.n	80022b4 <__smakebuf_r+0xc>
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <__smakebuf_r+0x7c>)
 80022ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80022f0:	89a3      	ldrh	r3, [r4, #12]
 80022f2:	6020      	str	r0, [r4, #0]
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	81a3      	strh	r3, [r4, #12]
 80022fa:	9b00      	ldr	r3, [sp, #0]
 80022fc:	6163      	str	r3, [r4, #20]
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	6120      	str	r0, [r4, #16]
 8002302:	b15b      	cbz	r3, 800231c <__smakebuf_r+0x74>
 8002304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002308:	4630      	mov	r0, r6
 800230a:	f000 fb73 	bl	80029f4 <_isatty_r>
 800230e:	b128      	cbz	r0, 800231c <__smakebuf_r+0x74>
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	81a3      	strh	r3, [r4, #12]
 800231c:	89a0      	ldrh	r0, [r4, #12]
 800231e:	4305      	orrs	r5, r0
 8002320:	81a5      	strh	r5, [r4, #12]
 8002322:	e7cd      	b.n	80022c0 <__smakebuf_r+0x18>
 8002324:	08001a09 	.word	0x08001a09

08002328 <__malloc_lock>:
 8002328:	4801      	ldr	r0, [pc, #4]	; (8002330 <__malloc_lock+0x8>)
 800232a:	f7ff bc64 	b.w	8001bf6 <__retarget_lock_acquire_recursive>
 800232e:	bf00      	nop
 8002330:	20000588 	.word	0x20000588

08002334 <__malloc_unlock>:
 8002334:	4801      	ldr	r0, [pc, #4]	; (800233c <__malloc_unlock+0x8>)
 8002336:	f7ff bc5f 	b.w	8001bf8 <__retarget_lock_release_recursive>
 800233a:	bf00      	nop
 800233c:	20000588 	.word	0x20000588

08002340 <_free_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4605      	mov	r5, r0
 8002344:	2900      	cmp	r1, #0
 8002346:	d041      	beq.n	80023cc <_free_r+0x8c>
 8002348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800234c:	1f0c      	subs	r4, r1, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	bfb8      	it	lt
 8002352:	18e4      	addlt	r4, r4, r3
 8002354:	f7ff ffe8 	bl	8002328 <__malloc_lock>
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <_free_r+0x90>)
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	b933      	cbnz	r3, 800236c <_free_r+0x2c>
 800235e:	6063      	str	r3, [r4, #4]
 8002360:	6014      	str	r4, [r2, #0]
 8002362:	4628      	mov	r0, r5
 8002364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002368:	f7ff bfe4 	b.w	8002334 <__malloc_unlock>
 800236c:	42a3      	cmp	r3, r4
 800236e:	d908      	bls.n	8002382 <_free_r+0x42>
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	1821      	adds	r1, r4, r0
 8002374:	428b      	cmp	r3, r1
 8002376:	bf01      	itttt	eq
 8002378:	6819      	ldreq	r1, [r3, #0]
 800237a:	685b      	ldreq	r3, [r3, #4]
 800237c:	1809      	addeq	r1, r1, r0
 800237e:	6021      	streq	r1, [r4, #0]
 8002380:	e7ed      	b.n	800235e <_free_r+0x1e>
 8002382:	461a      	mov	r2, r3
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	b10b      	cbz	r3, 800238c <_free_r+0x4c>
 8002388:	42a3      	cmp	r3, r4
 800238a:	d9fa      	bls.n	8002382 <_free_r+0x42>
 800238c:	6811      	ldr	r1, [r2, #0]
 800238e:	1850      	adds	r0, r2, r1
 8002390:	42a0      	cmp	r0, r4
 8002392:	d10b      	bne.n	80023ac <_free_r+0x6c>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	4401      	add	r1, r0
 8002398:	1850      	adds	r0, r2, r1
 800239a:	4283      	cmp	r3, r0
 800239c:	6011      	str	r1, [r2, #0]
 800239e:	d1e0      	bne.n	8002362 <_free_r+0x22>
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	6053      	str	r3, [r2, #4]
 80023a6:	4401      	add	r1, r0
 80023a8:	6011      	str	r1, [r2, #0]
 80023aa:	e7da      	b.n	8002362 <_free_r+0x22>
 80023ac:	d902      	bls.n	80023b4 <_free_r+0x74>
 80023ae:	230c      	movs	r3, #12
 80023b0:	602b      	str	r3, [r5, #0]
 80023b2:	e7d6      	b.n	8002362 <_free_r+0x22>
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	1821      	adds	r1, r4, r0
 80023b8:	428b      	cmp	r3, r1
 80023ba:	bf04      	itt	eq
 80023bc:	6819      	ldreq	r1, [r3, #0]
 80023be:	685b      	ldreq	r3, [r3, #4]
 80023c0:	6063      	str	r3, [r4, #4]
 80023c2:	bf04      	itt	eq
 80023c4:	1809      	addeq	r1, r1, r0
 80023c6:	6021      	streq	r1, [r4, #0]
 80023c8:	6054      	str	r4, [r2, #4]
 80023ca:	e7ca      	b.n	8002362 <_free_r+0x22>
 80023cc:	bd38      	pop	{r3, r4, r5, pc}
 80023ce:	bf00      	nop
 80023d0:	2000058c 	.word	0x2000058c

080023d4 <__sfputc_r>:
 80023d4:	6893      	ldr	r3, [r2, #8]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	b410      	push	{r4}
 80023dc:	6093      	str	r3, [r2, #8]
 80023de:	da07      	bge.n	80023f0 <__sfputc_r+0x1c>
 80023e0:	6994      	ldr	r4, [r2, #24]
 80023e2:	42a3      	cmp	r3, r4
 80023e4:	db01      	blt.n	80023ea <__sfputc_r+0x16>
 80023e6:	290a      	cmp	r1, #10
 80023e8:	d102      	bne.n	80023f0 <__sfputc_r+0x1c>
 80023ea:	bc10      	pop	{r4}
 80023ec:	f7ff bd84 	b.w	8001ef8 <__swbuf_r>
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	1c58      	adds	r0, r3, #1
 80023f4:	6010      	str	r0, [r2, #0]
 80023f6:	7019      	strb	r1, [r3, #0]
 80023f8:	4608      	mov	r0, r1
 80023fa:	bc10      	pop	{r4}
 80023fc:	4770      	bx	lr

080023fe <__sfputs_r>:
 80023fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002400:	4606      	mov	r6, r0
 8002402:	460f      	mov	r7, r1
 8002404:	4614      	mov	r4, r2
 8002406:	18d5      	adds	r5, r2, r3
 8002408:	42ac      	cmp	r4, r5
 800240a:	d101      	bne.n	8002410 <__sfputs_r+0x12>
 800240c:	2000      	movs	r0, #0
 800240e:	e007      	b.n	8002420 <__sfputs_r+0x22>
 8002410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002414:	463a      	mov	r2, r7
 8002416:	4630      	mov	r0, r6
 8002418:	f7ff ffdc 	bl	80023d4 <__sfputc_r>
 800241c:	1c43      	adds	r3, r0, #1
 800241e:	d1f3      	bne.n	8002408 <__sfputs_r+0xa>
 8002420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002424 <_vfiprintf_r>:
 8002424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002428:	460d      	mov	r5, r1
 800242a:	b09d      	sub	sp, #116	; 0x74
 800242c:	4614      	mov	r4, r2
 800242e:	4698      	mov	r8, r3
 8002430:	4606      	mov	r6, r0
 8002432:	b118      	cbz	r0, 800243c <_vfiprintf_r+0x18>
 8002434:	6983      	ldr	r3, [r0, #24]
 8002436:	b90b      	cbnz	r3, 800243c <_vfiprintf_r+0x18>
 8002438:	f7ff fb1a 	bl	8001a70 <__sinit>
 800243c:	4b89      	ldr	r3, [pc, #548]	; (8002664 <_vfiprintf_r+0x240>)
 800243e:	429d      	cmp	r5, r3
 8002440:	d11b      	bne.n	800247a <_vfiprintf_r+0x56>
 8002442:	6875      	ldr	r5, [r6, #4]
 8002444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002446:	07d9      	lsls	r1, r3, #31
 8002448:	d405      	bmi.n	8002456 <_vfiprintf_r+0x32>
 800244a:	89ab      	ldrh	r3, [r5, #12]
 800244c:	059a      	lsls	r2, r3, #22
 800244e:	d402      	bmi.n	8002456 <_vfiprintf_r+0x32>
 8002450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002452:	f7ff fbd0 	bl	8001bf6 <__retarget_lock_acquire_recursive>
 8002456:	89ab      	ldrh	r3, [r5, #12]
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	d501      	bpl.n	8002460 <_vfiprintf_r+0x3c>
 800245c:	692b      	ldr	r3, [r5, #16]
 800245e:	b9eb      	cbnz	r3, 800249c <_vfiprintf_r+0x78>
 8002460:	4629      	mov	r1, r5
 8002462:	4630      	mov	r0, r6
 8002464:	f7ff fdac 	bl	8001fc0 <__swsetup_r>
 8002468:	b1c0      	cbz	r0, 800249c <_vfiprintf_r+0x78>
 800246a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800246c:	07dc      	lsls	r4, r3, #31
 800246e:	d50e      	bpl.n	800248e <_vfiprintf_r+0x6a>
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	b01d      	add	sp, #116	; 0x74
 8002476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800247a:	4b7b      	ldr	r3, [pc, #492]	; (8002668 <_vfiprintf_r+0x244>)
 800247c:	429d      	cmp	r5, r3
 800247e:	d101      	bne.n	8002484 <_vfiprintf_r+0x60>
 8002480:	68b5      	ldr	r5, [r6, #8]
 8002482:	e7df      	b.n	8002444 <_vfiprintf_r+0x20>
 8002484:	4b79      	ldr	r3, [pc, #484]	; (800266c <_vfiprintf_r+0x248>)
 8002486:	429d      	cmp	r5, r3
 8002488:	bf08      	it	eq
 800248a:	68f5      	ldreq	r5, [r6, #12]
 800248c:	e7da      	b.n	8002444 <_vfiprintf_r+0x20>
 800248e:	89ab      	ldrh	r3, [r5, #12]
 8002490:	0598      	lsls	r0, r3, #22
 8002492:	d4ed      	bmi.n	8002470 <_vfiprintf_r+0x4c>
 8002494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002496:	f7ff fbaf 	bl	8001bf8 <__retarget_lock_release_recursive>
 800249a:	e7e9      	b.n	8002470 <_vfiprintf_r+0x4c>
 800249c:	2300      	movs	r3, #0
 800249e:	9309      	str	r3, [sp, #36]	; 0x24
 80024a0:	2320      	movs	r3, #32
 80024a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80024aa:	2330      	movs	r3, #48	; 0x30
 80024ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002670 <_vfiprintf_r+0x24c>
 80024b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024b4:	f04f 0901 	mov.w	r9, #1
 80024b8:	4623      	mov	r3, r4
 80024ba:	469a      	mov	sl, r3
 80024bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024c0:	b10a      	cbz	r2, 80024c6 <_vfiprintf_r+0xa2>
 80024c2:	2a25      	cmp	r2, #37	; 0x25
 80024c4:	d1f9      	bne.n	80024ba <_vfiprintf_r+0x96>
 80024c6:	ebba 0b04 	subs.w	fp, sl, r4
 80024ca:	d00b      	beq.n	80024e4 <_vfiprintf_r+0xc0>
 80024cc:	465b      	mov	r3, fp
 80024ce:	4622      	mov	r2, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	4630      	mov	r0, r6
 80024d4:	f7ff ff93 	bl	80023fe <__sfputs_r>
 80024d8:	3001      	adds	r0, #1
 80024da:	f000 80aa 	beq.w	8002632 <_vfiprintf_r+0x20e>
 80024de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024e0:	445a      	add	r2, fp
 80024e2:	9209      	str	r2, [sp, #36]	; 0x24
 80024e4:	f89a 3000 	ldrb.w	r3, [sl]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a2 	beq.w	8002632 <_vfiprintf_r+0x20e>
 80024ee:	2300      	movs	r3, #0
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024f8:	f10a 0a01 	add.w	sl, sl, #1
 80024fc:	9304      	str	r3, [sp, #16]
 80024fe:	9307      	str	r3, [sp, #28]
 8002500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002504:	931a      	str	r3, [sp, #104]	; 0x68
 8002506:	4654      	mov	r4, sl
 8002508:	2205      	movs	r2, #5
 800250a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800250e:	4858      	ldr	r0, [pc, #352]	; (8002670 <_vfiprintf_r+0x24c>)
 8002510:	f7fd fe86 	bl	8000220 <memchr>
 8002514:	9a04      	ldr	r2, [sp, #16]
 8002516:	b9d8      	cbnz	r0, 8002550 <_vfiprintf_r+0x12c>
 8002518:	06d1      	lsls	r1, r2, #27
 800251a:	bf44      	itt	mi
 800251c:	2320      	movmi	r3, #32
 800251e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002522:	0713      	lsls	r3, r2, #28
 8002524:	bf44      	itt	mi
 8002526:	232b      	movmi	r3, #43	; 0x2b
 8002528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800252c:	f89a 3000 	ldrb.w	r3, [sl]
 8002530:	2b2a      	cmp	r3, #42	; 0x2a
 8002532:	d015      	beq.n	8002560 <_vfiprintf_r+0x13c>
 8002534:	9a07      	ldr	r2, [sp, #28]
 8002536:	4654      	mov	r4, sl
 8002538:	2000      	movs	r0, #0
 800253a:	f04f 0c0a 	mov.w	ip, #10
 800253e:	4621      	mov	r1, r4
 8002540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002544:	3b30      	subs	r3, #48	; 0x30
 8002546:	2b09      	cmp	r3, #9
 8002548:	d94e      	bls.n	80025e8 <_vfiprintf_r+0x1c4>
 800254a:	b1b0      	cbz	r0, 800257a <_vfiprintf_r+0x156>
 800254c:	9207      	str	r2, [sp, #28]
 800254e:	e014      	b.n	800257a <_vfiprintf_r+0x156>
 8002550:	eba0 0308 	sub.w	r3, r0, r8
 8002554:	fa09 f303 	lsl.w	r3, r9, r3
 8002558:	4313      	orrs	r3, r2
 800255a:	9304      	str	r3, [sp, #16]
 800255c:	46a2      	mov	sl, r4
 800255e:	e7d2      	b.n	8002506 <_vfiprintf_r+0xe2>
 8002560:	9b03      	ldr	r3, [sp, #12]
 8002562:	1d19      	adds	r1, r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	9103      	str	r1, [sp, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	bfbb      	ittet	lt
 800256c:	425b      	neglt	r3, r3
 800256e:	f042 0202 	orrlt.w	r2, r2, #2
 8002572:	9307      	strge	r3, [sp, #28]
 8002574:	9307      	strlt	r3, [sp, #28]
 8002576:	bfb8      	it	lt
 8002578:	9204      	strlt	r2, [sp, #16]
 800257a:	7823      	ldrb	r3, [r4, #0]
 800257c:	2b2e      	cmp	r3, #46	; 0x2e
 800257e:	d10c      	bne.n	800259a <_vfiprintf_r+0x176>
 8002580:	7863      	ldrb	r3, [r4, #1]
 8002582:	2b2a      	cmp	r3, #42	; 0x2a
 8002584:	d135      	bne.n	80025f2 <_vfiprintf_r+0x1ce>
 8002586:	9b03      	ldr	r3, [sp, #12]
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	9203      	str	r2, [sp, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	bfb8      	it	lt
 8002592:	f04f 33ff 	movlt.w	r3, #4294967295
 8002596:	3402      	adds	r4, #2
 8002598:	9305      	str	r3, [sp, #20]
 800259a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002674 <_vfiprintf_r+0x250>
 800259e:	7821      	ldrb	r1, [r4, #0]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4650      	mov	r0, sl
 80025a4:	f7fd fe3c 	bl	8000220 <memchr>
 80025a8:	b140      	cbz	r0, 80025bc <_vfiprintf_r+0x198>
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	eba0 000a 	sub.w	r0, r0, sl
 80025b0:	fa03 f000 	lsl.w	r0, r3, r0
 80025b4:	9b04      	ldr	r3, [sp, #16]
 80025b6:	4303      	orrs	r3, r0
 80025b8:	3401      	adds	r4, #1
 80025ba:	9304      	str	r3, [sp, #16]
 80025bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c0:	482d      	ldr	r0, [pc, #180]	; (8002678 <_vfiprintf_r+0x254>)
 80025c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025c6:	2206      	movs	r2, #6
 80025c8:	f7fd fe2a 	bl	8000220 <memchr>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d03f      	beq.n	8002650 <_vfiprintf_r+0x22c>
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <_vfiprintf_r+0x258>)
 80025d2:	bb1b      	cbnz	r3, 800261c <_vfiprintf_r+0x1f8>
 80025d4:	9b03      	ldr	r3, [sp, #12]
 80025d6:	3307      	adds	r3, #7
 80025d8:	f023 0307 	bic.w	r3, r3, #7
 80025dc:	3308      	adds	r3, #8
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e2:	443b      	add	r3, r7
 80025e4:	9309      	str	r3, [sp, #36]	; 0x24
 80025e6:	e767      	b.n	80024b8 <_vfiprintf_r+0x94>
 80025e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80025ec:	460c      	mov	r4, r1
 80025ee:	2001      	movs	r0, #1
 80025f0:	e7a5      	b.n	800253e <_vfiprintf_r+0x11a>
 80025f2:	2300      	movs	r3, #0
 80025f4:	3401      	adds	r4, #1
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 0c0a 	mov.w	ip, #10
 80025fe:	4620      	mov	r0, r4
 8002600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002604:	3a30      	subs	r2, #48	; 0x30
 8002606:	2a09      	cmp	r2, #9
 8002608:	d903      	bls.n	8002612 <_vfiprintf_r+0x1ee>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0c5      	beq.n	800259a <_vfiprintf_r+0x176>
 800260e:	9105      	str	r1, [sp, #20]
 8002610:	e7c3      	b.n	800259a <_vfiprintf_r+0x176>
 8002612:	fb0c 2101 	mla	r1, ip, r1, r2
 8002616:	4604      	mov	r4, r0
 8002618:	2301      	movs	r3, #1
 800261a:	e7f0      	b.n	80025fe <_vfiprintf_r+0x1da>
 800261c:	ab03      	add	r3, sp, #12
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	462a      	mov	r2, r5
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <_vfiprintf_r+0x25c>)
 8002624:	a904      	add	r1, sp, #16
 8002626:	4630      	mov	r0, r6
 8002628:	f3af 8000 	nop.w
 800262c:	4607      	mov	r7, r0
 800262e:	1c78      	adds	r0, r7, #1
 8002630:	d1d6      	bne.n	80025e0 <_vfiprintf_r+0x1bc>
 8002632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002634:	07d9      	lsls	r1, r3, #31
 8002636:	d405      	bmi.n	8002644 <_vfiprintf_r+0x220>
 8002638:	89ab      	ldrh	r3, [r5, #12]
 800263a:	059a      	lsls	r2, r3, #22
 800263c:	d402      	bmi.n	8002644 <_vfiprintf_r+0x220>
 800263e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002640:	f7ff fada 	bl	8001bf8 <__retarget_lock_release_recursive>
 8002644:	89ab      	ldrh	r3, [r5, #12]
 8002646:	065b      	lsls	r3, r3, #25
 8002648:	f53f af12 	bmi.w	8002470 <_vfiprintf_r+0x4c>
 800264c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800264e:	e711      	b.n	8002474 <_vfiprintf_r+0x50>
 8002650:	ab03      	add	r3, sp, #12
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	462a      	mov	r2, r5
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <_vfiprintf_r+0x25c>)
 8002658:	a904      	add	r1, sp, #16
 800265a:	4630      	mov	r0, r6
 800265c:	f000 f880 	bl	8002760 <_printf_i>
 8002660:	e7e4      	b.n	800262c <_vfiprintf_r+0x208>
 8002662:	bf00      	nop
 8002664:	08002ad8 	.word	0x08002ad8
 8002668:	08002af8 	.word	0x08002af8
 800266c:	08002ab8 	.word	0x08002ab8
 8002670:	08002b1c 	.word	0x08002b1c
 8002674:	08002b22 	.word	0x08002b22
 8002678:	08002b26 	.word	0x08002b26
 800267c:	00000000 	.word	0x00000000
 8002680:	080023ff 	.word	0x080023ff

08002684 <_printf_common>:
 8002684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002688:	4616      	mov	r6, r2
 800268a:	4699      	mov	r9, r3
 800268c:	688a      	ldr	r2, [r1, #8]
 800268e:	690b      	ldr	r3, [r1, #16]
 8002690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002694:	4293      	cmp	r3, r2
 8002696:	bfb8      	it	lt
 8002698:	4613      	movlt	r3, r2
 800269a:	6033      	str	r3, [r6, #0]
 800269c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026a0:	4607      	mov	r7, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	b10a      	cbz	r2, 80026aa <_printf_common+0x26>
 80026a6:	3301      	adds	r3, #1
 80026a8:	6033      	str	r3, [r6, #0]
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	0699      	lsls	r1, r3, #26
 80026ae:	bf42      	ittt	mi
 80026b0:	6833      	ldrmi	r3, [r6, #0]
 80026b2:	3302      	addmi	r3, #2
 80026b4:	6033      	strmi	r3, [r6, #0]
 80026b6:	6825      	ldr	r5, [r4, #0]
 80026b8:	f015 0506 	ands.w	r5, r5, #6
 80026bc:	d106      	bne.n	80026cc <_printf_common+0x48>
 80026be:	f104 0a19 	add.w	sl, r4, #25
 80026c2:	68e3      	ldr	r3, [r4, #12]
 80026c4:	6832      	ldr	r2, [r6, #0]
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	42ab      	cmp	r3, r5
 80026ca:	dc26      	bgt.n	800271a <_printf_common+0x96>
 80026cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026d0:	1e13      	subs	r3, r2, #0
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	bf18      	it	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	0692      	lsls	r2, r2, #26
 80026da:	d42b      	bmi.n	8002734 <_printf_common+0xb0>
 80026dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026e0:	4649      	mov	r1, r9
 80026e2:	4638      	mov	r0, r7
 80026e4:	47c0      	blx	r8
 80026e6:	3001      	adds	r0, #1
 80026e8:	d01e      	beq.n	8002728 <_printf_common+0xa4>
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	68e5      	ldr	r5, [r4, #12]
 80026ee:	6832      	ldr	r2, [r6, #0]
 80026f0:	f003 0306 	and.w	r3, r3, #6
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	bf08      	it	eq
 80026f8:	1aad      	subeq	r5, r5, r2
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	6922      	ldr	r2, [r4, #16]
 80026fe:	bf0c      	ite	eq
 8002700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002704:	2500      	movne	r5, #0
 8002706:	4293      	cmp	r3, r2
 8002708:	bfc4      	itt	gt
 800270a:	1a9b      	subgt	r3, r3, r2
 800270c:	18ed      	addgt	r5, r5, r3
 800270e:	2600      	movs	r6, #0
 8002710:	341a      	adds	r4, #26
 8002712:	42b5      	cmp	r5, r6
 8002714:	d11a      	bne.n	800274c <_printf_common+0xc8>
 8002716:	2000      	movs	r0, #0
 8002718:	e008      	b.n	800272c <_printf_common+0xa8>
 800271a:	2301      	movs	r3, #1
 800271c:	4652      	mov	r2, sl
 800271e:	4649      	mov	r1, r9
 8002720:	4638      	mov	r0, r7
 8002722:	47c0      	blx	r8
 8002724:	3001      	adds	r0, #1
 8002726:	d103      	bne.n	8002730 <_printf_common+0xac>
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002730:	3501      	adds	r5, #1
 8002732:	e7c6      	b.n	80026c2 <_printf_common+0x3e>
 8002734:	18e1      	adds	r1, r4, r3
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	2030      	movs	r0, #48	; 0x30
 800273a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800273e:	4422      	add	r2, r4
 8002740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002748:	3302      	adds	r3, #2
 800274a:	e7c7      	b.n	80026dc <_printf_common+0x58>
 800274c:	2301      	movs	r3, #1
 800274e:	4622      	mov	r2, r4
 8002750:	4649      	mov	r1, r9
 8002752:	4638      	mov	r0, r7
 8002754:	47c0      	blx	r8
 8002756:	3001      	adds	r0, #1
 8002758:	d0e6      	beq.n	8002728 <_printf_common+0xa4>
 800275a:	3601      	adds	r6, #1
 800275c:	e7d9      	b.n	8002712 <_printf_common+0x8e>
	...

08002760 <_printf_i>:
 8002760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	7e0f      	ldrb	r7, [r1, #24]
 8002766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002768:	2f78      	cmp	r7, #120	; 0x78
 800276a:	4691      	mov	r9, r2
 800276c:	4680      	mov	r8, r0
 800276e:	460c      	mov	r4, r1
 8002770:	469a      	mov	sl, r3
 8002772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002776:	d807      	bhi.n	8002788 <_printf_i+0x28>
 8002778:	2f62      	cmp	r7, #98	; 0x62
 800277a:	d80a      	bhi.n	8002792 <_printf_i+0x32>
 800277c:	2f00      	cmp	r7, #0
 800277e:	f000 80d8 	beq.w	8002932 <_printf_i+0x1d2>
 8002782:	2f58      	cmp	r7, #88	; 0x58
 8002784:	f000 80a3 	beq.w	80028ce <_printf_i+0x16e>
 8002788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800278c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002790:	e03a      	b.n	8002808 <_printf_i+0xa8>
 8002792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002796:	2b15      	cmp	r3, #21
 8002798:	d8f6      	bhi.n	8002788 <_printf_i+0x28>
 800279a:	a101      	add	r1, pc, #4	; (adr r1, 80027a0 <_printf_i+0x40>)
 800279c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027a0:	080027f9 	.word	0x080027f9
 80027a4:	0800280d 	.word	0x0800280d
 80027a8:	08002789 	.word	0x08002789
 80027ac:	08002789 	.word	0x08002789
 80027b0:	08002789 	.word	0x08002789
 80027b4:	08002789 	.word	0x08002789
 80027b8:	0800280d 	.word	0x0800280d
 80027bc:	08002789 	.word	0x08002789
 80027c0:	08002789 	.word	0x08002789
 80027c4:	08002789 	.word	0x08002789
 80027c8:	08002789 	.word	0x08002789
 80027cc:	08002919 	.word	0x08002919
 80027d0:	0800283d 	.word	0x0800283d
 80027d4:	080028fb 	.word	0x080028fb
 80027d8:	08002789 	.word	0x08002789
 80027dc:	08002789 	.word	0x08002789
 80027e0:	0800293b 	.word	0x0800293b
 80027e4:	08002789 	.word	0x08002789
 80027e8:	0800283d 	.word	0x0800283d
 80027ec:	08002789 	.word	0x08002789
 80027f0:	08002789 	.word	0x08002789
 80027f4:	08002903 	.word	0x08002903
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	1d1a      	adds	r2, r3, #4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	602a      	str	r2, [r5, #0]
 8002800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002808:	2301      	movs	r3, #1
 800280a:	e0a3      	b.n	8002954 <_printf_i+0x1f4>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	6829      	ldr	r1, [r5, #0]
 8002810:	0606      	lsls	r6, r0, #24
 8002812:	f101 0304 	add.w	r3, r1, #4
 8002816:	d50a      	bpl.n	800282e <_printf_i+0xce>
 8002818:	680e      	ldr	r6, [r1, #0]
 800281a:	602b      	str	r3, [r5, #0]
 800281c:	2e00      	cmp	r6, #0
 800281e:	da03      	bge.n	8002828 <_printf_i+0xc8>
 8002820:	232d      	movs	r3, #45	; 0x2d
 8002822:	4276      	negs	r6, r6
 8002824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002828:	485e      	ldr	r0, [pc, #376]	; (80029a4 <_printf_i+0x244>)
 800282a:	230a      	movs	r3, #10
 800282c:	e019      	b.n	8002862 <_printf_i+0x102>
 800282e:	680e      	ldr	r6, [r1, #0]
 8002830:	602b      	str	r3, [r5, #0]
 8002832:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002836:	bf18      	it	ne
 8002838:	b236      	sxthne	r6, r6
 800283a:	e7ef      	b.n	800281c <_printf_i+0xbc>
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	1d19      	adds	r1, r3, #4
 8002842:	6029      	str	r1, [r5, #0]
 8002844:	0601      	lsls	r1, r0, #24
 8002846:	d501      	bpl.n	800284c <_printf_i+0xec>
 8002848:	681e      	ldr	r6, [r3, #0]
 800284a:	e002      	b.n	8002852 <_printf_i+0xf2>
 800284c:	0646      	lsls	r6, r0, #25
 800284e:	d5fb      	bpl.n	8002848 <_printf_i+0xe8>
 8002850:	881e      	ldrh	r6, [r3, #0]
 8002852:	4854      	ldr	r0, [pc, #336]	; (80029a4 <_printf_i+0x244>)
 8002854:	2f6f      	cmp	r7, #111	; 0x6f
 8002856:	bf0c      	ite	eq
 8002858:	2308      	moveq	r3, #8
 800285a:	230a      	movne	r3, #10
 800285c:	2100      	movs	r1, #0
 800285e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002862:	6865      	ldr	r5, [r4, #4]
 8002864:	60a5      	str	r5, [r4, #8]
 8002866:	2d00      	cmp	r5, #0
 8002868:	bfa2      	ittt	ge
 800286a:	6821      	ldrge	r1, [r4, #0]
 800286c:	f021 0104 	bicge.w	r1, r1, #4
 8002870:	6021      	strge	r1, [r4, #0]
 8002872:	b90e      	cbnz	r6, 8002878 <_printf_i+0x118>
 8002874:	2d00      	cmp	r5, #0
 8002876:	d04d      	beq.n	8002914 <_printf_i+0x1b4>
 8002878:	4615      	mov	r5, r2
 800287a:	fbb6 f1f3 	udiv	r1, r6, r3
 800287e:	fb03 6711 	mls	r7, r3, r1, r6
 8002882:	5dc7      	ldrb	r7, [r0, r7]
 8002884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002888:	4637      	mov	r7, r6
 800288a:	42bb      	cmp	r3, r7
 800288c:	460e      	mov	r6, r1
 800288e:	d9f4      	bls.n	800287a <_printf_i+0x11a>
 8002890:	2b08      	cmp	r3, #8
 8002892:	d10b      	bne.n	80028ac <_printf_i+0x14c>
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	07de      	lsls	r6, r3, #31
 8002898:	d508      	bpl.n	80028ac <_printf_i+0x14c>
 800289a:	6923      	ldr	r3, [r4, #16]
 800289c:	6861      	ldr	r1, [r4, #4]
 800289e:	4299      	cmp	r1, r3
 80028a0:	bfde      	ittt	le
 80028a2:	2330      	movle	r3, #48	; 0x30
 80028a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028ac:	1b52      	subs	r2, r2, r5
 80028ae:	6122      	str	r2, [r4, #16]
 80028b0:	f8cd a000 	str.w	sl, [sp]
 80028b4:	464b      	mov	r3, r9
 80028b6:	aa03      	add	r2, sp, #12
 80028b8:	4621      	mov	r1, r4
 80028ba:	4640      	mov	r0, r8
 80028bc:	f7ff fee2 	bl	8002684 <_printf_common>
 80028c0:	3001      	adds	r0, #1
 80028c2:	d14c      	bne.n	800295e <_printf_i+0x1fe>
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	b004      	add	sp, #16
 80028ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ce:	4835      	ldr	r0, [pc, #212]	; (80029a4 <_printf_i+0x244>)
 80028d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028d4:	6829      	ldr	r1, [r5, #0]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80028dc:	6029      	str	r1, [r5, #0]
 80028de:	061d      	lsls	r5, r3, #24
 80028e0:	d514      	bpl.n	800290c <_printf_i+0x1ac>
 80028e2:	07df      	lsls	r7, r3, #31
 80028e4:	bf44      	itt	mi
 80028e6:	f043 0320 	orrmi.w	r3, r3, #32
 80028ea:	6023      	strmi	r3, [r4, #0]
 80028ec:	b91e      	cbnz	r6, 80028f6 <_printf_i+0x196>
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f023 0320 	bic.w	r3, r3, #32
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	2310      	movs	r3, #16
 80028f8:	e7b0      	b.n	800285c <_printf_i+0xfc>
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	f043 0320 	orr.w	r3, r3, #32
 8002900:	6023      	str	r3, [r4, #0]
 8002902:	2378      	movs	r3, #120	; 0x78
 8002904:	4828      	ldr	r0, [pc, #160]	; (80029a8 <_printf_i+0x248>)
 8002906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800290a:	e7e3      	b.n	80028d4 <_printf_i+0x174>
 800290c:	0659      	lsls	r1, r3, #25
 800290e:	bf48      	it	mi
 8002910:	b2b6      	uxthmi	r6, r6
 8002912:	e7e6      	b.n	80028e2 <_printf_i+0x182>
 8002914:	4615      	mov	r5, r2
 8002916:	e7bb      	b.n	8002890 <_printf_i+0x130>
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	6826      	ldr	r6, [r4, #0]
 800291c:	6961      	ldr	r1, [r4, #20]
 800291e:	1d18      	adds	r0, r3, #4
 8002920:	6028      	str	r0, [r5, #0]
 8002922:	0635      	lsls	r5, r6, #24
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	d501      	bpl.n	800292c <_printf_i+0x1cc>
 8002928:	6019      	str	r1, [r3, #0]
 800292a:	e002      	b.n	8002932 <_printf_i+0x1d2>
 800292c:	0670      	lsls	r0, r6, #25
 800292e:	d5fb      	bpl.n	8002928 <_printf_i+0x1c8>
 8002930:	8019      	strh	r1, [r3, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	6123      	str	r3, [r4, #16]
 8002936:	4615      	mov	r5, r2
 8002938:	e7ba      	b.n	80028b0 <_printf_i+0x150>
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	1d1a      	adds	r2, r3, #4
 800293e:	602a      	str	r2, [r5, #0]
 8002940:	681d      	ldr	r5, [r3, #0]
 8002942:	6862      	ldr	r2, [r4, #4]
 8002944:	2100      	movs	r1, #0
 8002946:	4628      	mov	r0, r5
 8002948:	f7fd fc6a 	bl	8000220 <memchr>
 800294c:	b108      	cbz	r0, 8002952 <_printf_i+0x1f2>
 800294e:	1b40      	subs	r0, r0, r5
 8002950:	6060      	str	r0, [r4, #4]
 8002952:	6863      	ldr	r3, [r4, #4]
 8002954:	6123      	str	r3, [r4, #16]
 8002956:	2300      	movs	r3, #0
 8002958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295c:	e7a8      	b.n	80028b0 <_printf_i+0x150>
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	462a      	mov	r2, r5
 8002962:	4649      	mov	r1, r9
 8002964:	4640      	mov	r0, r8
 8002966:	47d0      	blx	sl
 8002968:	3001      	adds	r0, #1
 800296a:	d0ab      	beq.n	80028c4 <_printf_i+0x164>
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	079b      	lsls	r3, r3, #30
 8002970:	d413      	bmi.n	800299a <_printf_i+0x23a>
 8002972:	68e0      	ldr	r0, [r4, #12]
 8002974:	9b03      	ldr	r3, [sp, #12]
 8002976:	4298      	cmp	r0, r3
 8002978:	bfb8      	it	lt
 800297a:	4618      	movlt	r0, r3
 800297c:	e7a4      	b.n	80028c8 <_printf_i+0x168>
 800297e:	2301      	movs	r3, #1
 8002980:	4632      	mov	r2, r6
 8002982:	4649      	mov	r1, r9
 8002984:	4640      	mov	r0, r8
 8002986:	47d0      	blx	sl
 8002988:	3001      	adds	r0, #1
 800298a:	d09b      	beq.n	80028c4 <_printf_i+0x164>
 800298c:	3501      	adds	r5, #1
 800298e:	68e3      	ldr	r3, [r4, #12]
 8002990:	9903      	ldr	r1, [sp, #12]
 8002992:	1a5b      	subs	r3, r3, r1
 8002994:	42ab      	cmp	r3, r5
 8002996:	dcf2      	bgt.n	800297e <_printf_i+0x21e>
 8002998:	e7eb      	b.n	8002972 <_printf_i+0x212>
 800299a:	2500      	movs	r5, #0
 800299c:	f104 0619 	add.w	r6, r4, #25
 80029a0:	e7f5      	b.n	800298e <_printf_i+0x22e>
 80029a2:	bf00      	nop
 80029a4:	08002b2d 	.word	0x08002b2d
 80029a8:	08002b3e 	.word	0x08002b3e

080029ac <_read_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4d07      	ldr	r5, [pc, #28]	; (80029cc <_read_r+0x20>)
 80029b0:	4604      	mov	r4, r0
 80029b2:	4608      	mov	r0, r1
 80029b4:	4611      	mov	r1, r2
 80029b6:	2200      	movs	r2, #0
 80029b8:	602a      	str	r2, [r5, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f7fe fd77 	bl	80014ae <_read>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d102      	bne.n	80029ca <_read_r+0x1e>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	b103      	cbz	r3, 80029ca <_read_r+0x1e>
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
 80029cc:	20000594 	.word	0x20000594

080029d0 <_fstat_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4d07      	ldr	r5, [pc, #28]	; (80029f0 <_fstat_r+0x20>)
 80029d4:	2300      	movs	r3, #0
 80029d6:	4604      	mov	r4, r0
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	602b      	str	r3, [r5, #0]
 80029de:	f7fe fe66 	bl	80016ae <_fstat>
 80029e2:	1c43      	adds	r3, r0, #1
 80029e4:	d102      	bne.n	80029ec <_fstat_r+0x1c>
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	b103      	cbz	r3, 80029ec <_fstat_r+0x1c>
 80029ea:	6023      	str	r3, [r4, #0]
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	20000594 	.word	0x20000594

080029f4 <_isatty_r>:
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	4d06      	ldr	r5, [pc, #24]	; (8002a10 <_isatty_r+0x1c>)
 80029f8:	2300      	movs	r3, #0
 80029fa:	4604      	mov	r4, r0
 80029fc:	4608      	mov	r0, r1
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	f7fe ffbc 	bl	800197c <_isatty>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d102      	bne.n	8002a0e <_isatty_r+0x1a>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	b103      	cbz	r3, 8002a0e <_isatty_r+0x1a>
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	20000594 	.word	0x20000594

08002a14 <_init>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	bf00      	nop
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr

08002a20 <_fini>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	bf00      	nop
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr
